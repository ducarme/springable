{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Library for nonlinear spring simulations (code on GitHub).  <p>Springable is a library for simulations of nonlinear springs. It allows you to simulate how mechanical structures made out of (non)linear springs deform when subject to forces. By accounting for any geometrical changes (as large as they may be), the simulation allows you to explore the richness of nonlinear mechanics, beyond the (boring) linear regime.</p> <p>The implementation of the library is geared towards understanding how spring assemblies lead to mechanical behaviors ranging from simple monotonic responses to complex, highly-nonlinear ones, such as snapping instabilities, sequencing, buckling, symmetry-breaking or restabilization.</p> <p>In its core, <code>springable</code> deals with springs, that we define as any entity that can store elastic energy. Springs therefore include longitudinal springs (compression and extension), angular springs (bending), area springs (useful to model fluids and pneumatic loading), path springs (useful to model cable-driven systems), and more! On top of that, the library allows you to define the energy potential of each individual spring to make them intrinsically linear or nonlinear, thereby generating a whole ecosystem of springs, ready to be assembled and simulated!</p> <p>Table of contents</p> <ul> <li>Getting started<ul> <li>Installation</li> <li>Don't want to install it right now? Try the Online Notebook</li> <li>Running a simulation</li> </ul> </li> <li>Many examples to help you get started</li> <li>Creating a CSV file describing the spring model (+examples)</li> <li>Specifying a nonlinear mechanical behavior (+examples)</li> <li>Configuring simulation settings (+examples)</li> </ul>"},{"location":"about_and_contact/","title":"About and contact","text":""},{"location":"about_and_contact/#credits","title":"Credits","text":"<p>Developed by Paul Ducarme since 2021.</p> <p>Acknowledgment:</p> <ul> <li>Bas Overvelde and the Soft Robotic Matter group</li> <li>Martin van Hecke and the Mechanical Metamaterials group</li> <li>Bart Weber and the Contact Dynamics group</li> <li>Dutch research institutes of AMOLF and ARCNL</li> <li>Fundings from the Dutch Research Council NWO and semiconductor equipment manufacturer ASML</li> <li>The beautiful and welcoming city of Amsterdam</li> </ul>"},{"location":"about_and_contact/#found-a-bug-feature-ideas-questions","title":"Found a bug? Feature ideas? Questions?","text":"<p>You can share it via https://github.com/ducarme/springable/issues or simply by sending an email at paulducarme@hotmail.com.</p>"},{"location":"about_and_contact/#general-inquiries","title":"General inquiries","text":"<p>Feel free to contact the author at paulducarme@hotmail.com</p>"},{"location":"advanced_topics/","title":"Advanced topics","text":""},{"location":"advanced_topics/#area-spring-with-holes","title":"Area spring with holes","text":"<p>coming up soon...</p>"},{"location":"advanced_topics/#complex-loading-descriptions","title":"Complex loading descriptions","text":"<p>coming up soon...</p>"},{"location":"advanced_topics/#scanning-parameters","title":"Scanning parameters","text":"<p>coming up soon...</p>"},{"location":"all_assets/","title":"All assets","text":""},{"location":"all_assets/#logo","title":"logo","text":""},{"location":"all_assets/#home-page-video","title":"home page video","text":"<p>mp4</p> <p>https://github.com/user-attachments/assets/8b689be4-4338-4e65-a529-fd1885b00b4d</p> <p>gif  </p>"},{"location":"all_assets/#getting-started-example","title":"getting started example","text":""},{"location":"all_assets/#behavior-creation-gui","title":"behavior creation gui","text":""},{"location":"all_assets/#different-behaviors","title":"different behaviors","text":""},{"location":"configuring_simulation_settings/","title":"Configuring simulation settings","text":"<p>Many settings can be tuned before running a simulation. They fall into two categories: solver settings or graphics settings.</p> <p>Solver settings only affect the solver (that is the part responsible to solve the nonlinear equations, by computing all the equilibrium points), while graphics settings determines what is generated to visualize a result (previously computed by the solver), and how it is going to look like.</p> <p>All default solver and graphics settings along with useful comments are listed herein below:</p> Default solver settingsDefault graphics settings show all default_solver_settings.toml<pre><code>radius = 0.05\nmust_be_stable_to_finish_loadstep=false\ni_max = 5_000  # max number of increments to reach the prescribed force\n\ndetect_critical_points = false\nbifurcate_at_simple_bifurcations = false  # only has an effect if 'detect_critical_points' is enabled\ncritical_point_epsilon = 1e-3  # when detecting critical points, a point is assumed to be critical if the ratio eig_val / initial_stiffness &lt; critical_point_epsilon\n# when bifurcating at simple bifurcations, amplitude of the perturbation (relative to the norm of the displacements)\n# that multiplies the normalized buckling eigenmode\nbifurcation_perturbation_amplitude = 1e-2\n\nshow_warnings = false\nverbose = true\ncritical_point_detection_verbose=false\nconvergence_value = 1e-7\ndetect_mechanism = true\n\n# herein below, more advanced settings for the arclength method\nj_max = 15  # max number of iterations to correct the prediction\nalpha = 0.0  # positive and never larger than 0.5\npsi_p = 0.0\npsi_c = 0.0\n</code></pre> show all default_graphics_settings.toml<pre><code>[general_options]\ngenerate_model_drawing = true\nshow_model_drawing = true\ngenerate_fd_plot = true\nshow_fd_plot = true\nshow_custom_plot = true\ngenerate_animation = true\nshow_animation = true\n\n# herein below the desired outputs when scanning parameters\ngenerate_parametric_fd_plots = true\nshow_parametric_fd_plots = true\nshow_parametric_custom_plots = true\ngenerate_all_model_drawings = false\nshow_all_model_drawings = false\ngenerate_all_fd_plots = false\ngenerate_all_animations = false\n\n[plot_options]\nshow_driven_path = false\ndriven_path_only = false\nloading_sequence = \"cycle\"\n# \"loading\", \"cycle\", \"loading_unloading\"\nshow_snapping_arrows = true\nall_snapping_arrows = false\n# if true (when show_snapping_arrow is true), it will show snapping arrow for every possible transition, regardless of the loading sequence,\n# else only the snapping arrows encountered during the prescribed loading sequence\n\nsnapping_arrow_style = '-'\ndrive_mode = \"none\"\n# \"none\" (nothing driven), \"force\" (force-driven), \"displacement\" (displacement-driven)\n\nplot_style = 'points' # points, line\n# will use points instead of line anyway in case the color mode is different from 'none' or 'stability'\n\ncolor_mode = \"stability\"\n# is *not* used when showing multiple equilibrium paths after a parameter scan\n# \"none\" (default color), \"stability\" (by stability), \"min_eigval_fd\" (by lowest force-driven eig. val.),\n# \"min_eigval_ud\" (by lowest displacement-driven eig. val.), \"nb_neg_eigval_fd\" (by nb force-driven eig. vals &lt; 0),\n# \"nb_neg_eigval_ud (by nb displacement-driven eig. val &lt; 0)\nshow_stability_legend = true\n# only has an effect if \"color_mode\" = \"stability\"\nshow_driven_path_legend = true\n# only has an effect if \"drive_mode\" is \"force\" or \"displacement\" and \"drive_path_only\" is false\n\nfigure_width = 4\nfigure_height = 4\naxis_box_aspect = 0.75  # aspect ratio of the box defined by the axes' spines\nenforce_xlim = false\nenforce_ylim = false\nxmin = 0.0\nymin = 0.0\nxmax = 1.0\nymax = 1.0\ntransparent = false\ndpi = 300\n\n# herein below, colormaps. Must be named colormaps from matplotlib\n# (visit https =//matplotlib.org/stable/users/explain/colors/colormaps.html for more info)\nrange_parameter_scan_colormap = \"viridis\"\ndiscrete_parameter_scan_colormap = \"tab10\"\nlowest_eigval_colormap = \"PuOr\"\n# used when \"color_mode\" \"min_eigval_fd\" or \"min_eigval_ud\" is used, diverging colormap recommended\nnb_negative_eigval_colormap = \"plasma\"\n# used when \"color_mode\" \"nb_neg_eigval_fd\" or \"nb_neg_eigval_ud\" is used\nenergy_colormap = \"viridis\"\n# used when \"color_mode\" \"energy\" is used\n\nmax_nb_legend_entries_for_discrete_parameter = 4\n\ndefault_plot_name = \"fd_curve\"\ndefault_xlabel = \"displacement\"\ndefault_ylabel = \"force\"\ndefault_color = \"#a0a0a0\"\ndefault_opacity = 1.0\ndefault_marker = \"o\"\ndefault_markersize = 2.5\ndefault_linewidth = 2.0\n\n\n# herein below colors to indicate the stability of an equilibrium point,\n# only used when \"color_mode\" \"stability\" is used.\ncolor_for_stable_points = \"#86a7fc\"\ncolor_for_stabilizable_points = \"#ffdd95\"\ncolor_for_unstable_points = \"#dd9843\"\n\n# herein below colors to indicate the stability of equilibrium branches\n# only used when 'plot_style=line'\nstyle_for_stable_branches = '-'\nstyle_for_stabilizable_branches = '--'\nstyle_for_unstable_branches = ':'\n\n# herein below labels used to indicate the stability of equilibrium branches\nlabel_for_stable_points = 'stable'\nlabel_for_stabilizable_points = 'stabilizable'\nlabel_for_unstable_points = 'unstable'\n\ndriven_path_color = \"#444444\"\nsize_for_driven_path = 0.4\n# scaling of the default markersize for driven path\nsnapping_arrow_color_loading = \"#ff0000\"\nsnapping_arrow_color_unloading = \"#0000ff\"\n# only has an effect if \"show_snapping_arrow\" is true\nsnapping_arrow_opacity = 1.0\n# only has an effect if \"show_snapping_arrow\" is true\nsnapping_arrow_width = 1.75\n# only has an effect if \"show_snapping_arrow\" is true\nsnapping_arrow_headwidth = 0.2\n# only has an effect if \"show_snapping_arrow\" is true\nsnapping_arrow_headlength = 0.4\n# only has an effect if \"show_snapping_arrow\" is true\n\n\n# herein below scaling of the markersize to indicate stability,\n# has no effect in case the \"color_mode\" \"min_eigval_fd\", \"min_eigval_ud\", \"nb_neg_eigval_fd\" or \"nb_neg_eigval_ud is used\nsize_for_stable_points = 1\nsize_for_stabilizable_points = 0.66\nsize_for_unstable_points = 0.33\n\nstylesheet = \"default\"\n# one of the style names of matplotlib (see https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html)\n# or the path/url to a stylesheet, such as \"my_style_sheets/my_favorite_style.mplstyle\" (see https://matplotlib.org/stable/users/explain/customizing.html#defining-your-own-style)\nspine_offset = 10\nshow_top_spine = false\nshow_bottom_spine = true\nshow_left_spine = true\nshow_right_spine = false\nhide_ticklabels = false\n\n[animation_options]\nfps = 25\nnb_frames = 50\ndpi = 200\ndrive_mode = \"none\"\n# \"none\" (nothing driven), \"force\" (force-driven), \"displacement\" (displacement-driven)\ncycling = false\ndefault_animation_name = \"animation\"\nsave_as_mp4 = false  # can only save as mp4 if ffmpeg is installed and is 'in the PATH'\nsave_as_transparent_mov = false # can only save as mov if ffmpeg is installed and is 'in the PATH'\nsave_as_gif = true\nsave_frames_as_png = false\nside_plot = true\nstylesheet = \"default\"\n# one of the style names of matplotlib (see https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html)\n# or the path/url to a stylesheet, such as \"my_style_sheets/my_favorite_style.mplstyle\" (see https://matplotlib.org/stable/users/explain/customizing.html#defining-your-own-style)\nanimated_equilibrium_point_color = \"#ff0000\"\nanimated_equilibrium_point_size= 10\nanimation_width = 8\nanimation_height = 4.5\n\n[assembly_appearance]\ndrawing_fig_width = 3\ndrawing_fig_height = 3\nenforce_xlim = false\nenforce_ylim = false\nxmin = 0.0\nymin = 0.0\nxmax = 1.0\nymax = 1.0\ndrawing_dpi = 300\nshow_axes = false\nstylesheet = \"default\"  # only used when drawing the model, not used for the animation\ntransparent = false  # used when saving the model drawing or saving animation as PNG frames\ncoloring_mode = \"generalized_force\"\n# \"none\", \"energy\", \"generalized_force\", \"generalized_stiffness\"\ncolor_elements = true\ncolor_forces = false\ncolormap=\"coolwarm\"\n# Colormap to color the elements and the forces. Must be a named colormap from matplotlib\n# (visit https =//matplotlib.org/stable/users/explain/colors/colormaps.html for more info)\nshow_state_of_hysterons = true # it true, label with a state number will be shown at the center of the element\nhysteron_state_label_size = 10\nhysteron_state_bg_color = \"#e0e0e0\"\nhysteron_state_txt_color = \"#101010\"\nshow_forces = true\nhide_low_preloading_forces = false  # low forces are defined by parameter 'low_preloading_force_threshold'\nlow_preloading_force_threshold = 0.0  # preloading load with magnitude below this value will not be depicted if 'hide_low_preloading_forces' is true.\nforce_vector_scaling = 1.0\nspring_style = \"simple\"  # \"simple\", \"elegant\", \"line\"\nspring_nb_coils = 4  # has no effect if \"spring_style\" = \"line\"\nspring_aspect = 0.4  # is only used when \"spring_style\" = \"elegant\"\nspring_linewidth = 2\nspring_width_scaling = 1.0\nspring_default_opacity = 1.0\nspring_default_color = \"#cecece\"\nangular_spring_style = \"line\"  # \"elegant\", \"line\"\nangular_spring_nb_coils = 6  # has no effect if \"angular_spring_style\" = \"line\"\nangular_spring_radii_ratio = 6  # ratio between the angular spring radius and the coil radius. Is only used when \"angular_spring_style\" = \"elegant\"\nangular_spring_aspect = 0.4  # is only used when \"angular_spring_style\" = \"elegant\"\nangular_spring_linewidth = 2\nangular_spring_radius_scaling = 1.0\nangular_spring_default_opacity = 1.0\nangular_spring_default_color = \"#cecece\"\narea_spring_default_opacity = 0.5\narea_spring_default_color = \"#cecece\"\npath_spring_linewidth = 2\npath_spring_default_opacity = 1.0\npath_spring_default_color = \"#cecece\"\npath_spring_dot_color = \"#ffffff\"\npath_spring_dot_opacity = 1.0\ndistance_spring_linestyle = '-'  # any linestyle from matplotlib, in particular 'none' if you dont want to show the distance line\ndistance_spring_linewidth = 1.0\ndistance_spring_default_opacity = 1.0\ndistance_spring_default_color = '#cecece'\ndistance_spring_line_linestyle = '--'  # any linestyle from matplotlib, in particular 'none' if you dont want to show the line from which the distance is measured\ndistance_spring_line_linewidth = 1.0\ndistance_spring_line_default_color = '#CECECE'\npaint_distance_spring_line_with_default_color = false\n# if true, the line from which the distance is measured will be depicted with its default color, if false its color will match the one from the distance line\nnode_style = \"elegant\"  # \"minimalist\", \"simple\", \"elegant\"\nnode_size = 5.\nnode_color = \"#101010\"\nnode_edgecolor = \"#101010\"\nnode_edgewidth = 1.0\nshow_node_numbers = false\nnode_nb_color = \"#cecece\"\nnode_nb_shift_x = 5\nnode_nb_shift_y = 5\nnode_nb_fontsize = 10\nforce_vector_style = 'basic'\npreload_force_opacity = 0.65\npreload_force_default_color = '#cecece'\nforce_default_color = '#000000'\nforce_vector_length_scaling = 1.0\nforce_vector_connection = \"tail\"\nforce_vector_linewidth = 1.0  # only has an effect if 'force_vector_style' is 'basic'\n</code></pre> <p>When you wish to change a setting (let's say a solver setting), create a TOML file, that is a text file saved with extension .toml. You can use the NotePad (Windows) or TextEdit (MacOS) to do that, for example. The file will look similar to this: custom_solver_settings.toml<pre><code>radius = 0.01\n</code></pre></p> <p>A lower value for <code>radius</code> can be used to refine the solution, at the cost of increasing the solving duration. Default value is 0.05.</p> <p>To use these custom solver settings, use the path to <code>custom_solver_settings.toml</code> as an extra argument of the <code>ss.simulate_model()</code> function, as follows:</p> my_first_simulation.py<pre><code>\"\"\"\nPython script example to learn how to use the package springable\n\"\"\"\nimport springable.simulation as ss\n\nss.simulate_model(model_path='my_spring_model.csv',\n                  save_dir='my_simulation_result',\n                  solver_settings='custom_solver_settings.toml')\n</code></pre> <p>Similarly, when you wish to modify a graphics setting, create another TOML file and include the settings you wish to modify custom_graphics_settings.toml<pre><code>[animation_options]\nnb_frames = 240\nfps = 60\n\n[plot_options]\nshow_snapping_arrows = true\ndrive_mode = \"force\"\n</code></pre></p> <p>Animation settings <code>nb_frames</code> and <code>fps</code> determine the number of frames and the frame rate (in frame per second) of the animation showing the spring assembly deforming. Plot settings <code>show_snapping_arrows = true</code> combined with <code>drive_mode = \"force\"</code> means that you want to indicate with arrows the (potential) snapping transitions under controlled force in the force-displacement plot. To indicate, snapping transitions under controlled displacement use <code>show_snapping_arrows = true</code> combined with <code>drive_mode = \"displacement\"</code> instead.</p> <p>To use these custom graphics settings, use the path to <code>custom_graphics_settings.toml</code> as an extra argument of the <code>ss.simulate_model()</code> function, as follows:</p> my_first_simulation.py<pre><code>\"\"\"\nPython script example to learn how to use the package springable\n\"\"\"\nimport springable.simulation as ss\n\nss.simulate_model(model_path='my_spring_model.csv',\n                  save_dir='my_simulation_result',\n                  solver_settings='custom_solver_settings.toml',\n                  graphics_settings='custom_graphics_settings.toml')\n</code></pre>"},{"location":"configuring_simulation_settings/#additional-notes","title":"Additional notes","text":"<ul> <li>A custom settings file does not need to contain all the possible settings; just include the one you wish to modify.</li> <li>Graphics settings are divided into 4 sections of settings (indicated by <code>[...]</code> in TOML files):<ul> <li>general options (determines what should be generated and directly shown (drawing, animation, plot))</li> <li>plot options (determines how plots will look like)</li> <li>animation options (determines how animations will look like)</li> <li>assembly appearance (determines how the spring assembly will be depicted)</li> </ul> </li> </ul>"},{"location":"creating_the_spring_model_csv_file/","title":"Creating the spring model csv file","text":"<p>The CSV file describing a valid spring model is specified as follows:</p> <pre><code>PARAMETERS\n&lt;parameter name&gt;, &lt;parameter value&gt;, [range]\n&lt;parameter name&gt;, &lt;parameter value&gt;, [range]\n...\nNODES\n&lt;node index&gt;, &lt;x&gt;, &lt;y&gt;, &lt;constrained x&gt;, &lt;constrained y&gt;\n&lt;node index&gt;, &lt;x&gt;, &lt;y&gt;, &lt;constrained x&gt;, &lt;constrained y&gt;\n...\nSPRINGS\n&lt;node index&gt;-&lt;node index&gt;, &lt;mechanical behavior&gt;, [natural length]\n&lt;node index&gt;-&lt;node index&gt;, &lt;mechanical behavior&gt;, [natural length]\n...\nANGULAR SPRINGS\n&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;, &lt;mechanical behavior&gt;, [natural angle]\n&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;, &lt;mechanical behavior&gt;, [natural angle]\n...\nAREA SPRINGS\n&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;-..., &lt;mechanical behavior&gt;, [natural area]\n&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;-..., &lt;mechanical behavior&gt;, [natural area]\n...\nPATH SPRINGS\n&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;-..., &lt;mechanical behavior&gt;, [natural length]\n&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;-..., &lt;mechanical behavior&gt;, [natural length]\n...\nDISTANCE SPRINGS\n&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;, &lt;mechanical behavior&gt;, [natural distance]\n&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;, &lt;mechanical behavior&gt;, [natural distance]\n...\nLOADING\n&lt;node index&gt;, &lt;direction&gt;, &lt;force&gt;, [max displacement]\n&lt;node index&gt;, &lt;direction&gt;, &lt;force&gt;, [max displacement]\n...\n</code></pre> <p>Legend: <code>&lt;...&gt;</code>: required field, <code>[...]</code>: optional field</p> <p>Each section is described in details herein below.</p> <ul> <li>The <code>PARAMETERS</code> section</li> <li>The <code>NODES</code> section</li> <li>The <code>SPRINGS</code> section</li> <li>The <code>ANGULAR SPRINGS</code> section</li> <li>The <code>AREA SPRINGS</code> section</li> <li>The <code>PATH SPRINGS</code> section</li> <li>The <code>DISTANCE SPRINGS</code> section</li> <li>The <code>LOADING</code> section</li> <li>A complete example</li> <li>Additional notes</li> </ul>"},{"location":"creating_the_spring_model_csv_file/#the-parameters-section","title":"The <code>PARAMETERS</code> section","text":"<p>The <code>PARAMETERS</code> section serves to define some parameters that can be used to in the next sections. To define a parameter, a line with the following structure is added to the section <code>PARAMETERS</code>:</p> <p><code>&lt;parameter name&gt;, &lt;parameter value&gt;</code>.</p> <ul> <li><code>&lt;parameter name&gt;</code> is the name of the parameter (character string without quotes).</li> <li><code>&lt;parameter value&gt;</code> is the value of the parameter. It can be either a float or a string (with simple quotes)</li> <li><code>[range]</code> (optional) is a vector of possible values the parameter can have. This field is used only when scanning the parameter space. The range can be specified in two different ways.<ul> <li>Either as a vector of n regularly-spaced values between two float. <p>Syntax: <code>[low bound; high bound; n]</code></p> <p>Example: <code>radius, 2.1, [2.0; 5.0; 4]</code></p> </li> <li>Either as a list of possible values. <p>Syntax: <code>{value1; value2; value3; ...}</code></p> <p>Example: <code>radius, 2.1, {1.0; 7.0; 8.0; 2.0}</code></p> </li> </ul> </li> </ul> <p>Example: <pre><code>PARAMETERS\nwidth, 2.0\nheight, 1.0\nstiffness, 7.3\n</code></pre></p> <p>Three parameters - <code>width</code>, <code>height</code> and <code>stiffness</code> - are defined and set to values <code>2.0</code>, <code>1.0</code> and <code>7.3</code> respectively.</p>"},{"location":"creating_the_spring_model_csv_file/#the-nodes-section","title":"The <code>NODES</code> section","text":"<p>The <code>NODES</code> section serves to define the nodes composing the spring assembly, by specifying their index, their coordinates and the fact they are constrained or not. To define a node, a line with the following structure is added to the section <code>NODES</code>.</p> <p><code>&lt;node index&gt;, &lt;x&gt;, &lt;y&gt;, &lt;constrained x&gt;, &lt;constrained y&gt;</code></p> <ul> <li><code>&lt;node index&gt;</code> is a positive integer (<code>0</code>, <code>1</code>, <code>2</code>, ...) representing the index of the node being defined. Two nodes cannot have the same index. When nodes are defined, indices cannot be skipped (if there are four nodes in total, the indices must be <code>0</code>, <code>1</code>, <code>2</code> and <code>3</code>). The order in which the nodes are defined does not matter.</li> <li><code>&lt;x&gt;</code> is the horizontal coordinate of the node (float).</li> <li><code>&lt;y&gt;</code> is the vertical coordinate of the node (float).</li> <li><code>&lt;constrained x&gt;</code> is either<ul> <li><code>1</code> if the node cannot move horizontally,</li> <li><code>0</code> if the node is free to move horizontally.</li> </ul> </li> <li><code>&lt;constrained y&gt;</code> is either<ul> <li><code>1</code> if the node cannot move vertically,</li> <li><code>0</code> if the node is free to move vertically.</li> </ul> </li> </ul> <p>Example: <pre><code>NODES\n0, -width/2, 0.0, 1, 1\n1, +width/2, 0.0, 1, 1\n2, 0.0, height, 1, 0\n</code></pre></p> <p>Three nodes labelled <code>0</code>, <code>1</code> and <code>2</code> are defined at coordinates <code>(-width/2, 0.0)</code>, <code>(+width/2, 0.0)</code>, <code>(0.0, height)</code> respectively. Nodes <code>0</code> and <code>1</code> are constrained horizontally and vertically, while node <code>2</code> is constrained horizontally but free to move vertically.</p>"},{"location":"creating_the_spring_model_csv_file/#the-springs-section","title":"The <code>SPRINGS</code> section","text":"<p>The <code>SPRINGS</code> section serves to define longitudinal springs, that is, springs whose elastic energy is a function of their length. Each longitudinal spring is defined by the two nodes it connects, a mechanical behavior, and optionally its natural length, that is the length it has if not constrained nor loaded. If no natural length is provided, the natural length is automatically set to the distance between the nodes connected by the spring.</p> <p>The mechanical behavior describes its intrinsic axial force-displacement relation. It can be a linear behavior (the spring follows Hooke's law) or a nonlinear one (see section Specifying a nonlinear mechanical behavior).</p> <p>To define a longitudinal spring, a line with the following structure is added to the section <code>SPRINGS</code>.</p> <p><code>&lt;node index&gt;-&lt;node index&gt;, &lt;mechanical behavior&gt;, [natural length]</code></p> <ul> <li><code>&lt;node index&gt;</code> is the index of one of the node connected to the spring.</li> <li><code>&lt;node index&gt;</code> is the index of the other node connected to the spring.</li> <li><code>&lt;mechanical behavior&gt;</code> is the axial mechanical behavior of the spring. To specify a linear longitudinal spring, the mechanical behavior is simply the spring constant (positive float).</li> <li><code>[natural length]</code> is the natural length of the spring connecting both nodes (positive float).  It is an optional parameter; if not provided the natural length of the spring element will automatically be set to the distance between both nodes as created in the <code>NODES</code> section.</li> </ul> <p>Example: <pre><code>SPRINGS\n0-2, stiffness\n1-2, stiffness\n</code></pre></p> <p>Two linear longitudinal springs are defined. Both are characterized by the spring constant value <code>stiffness</code>. No natural length was provided, so their natural length will be automatically set to the distance between nodes <code>0</code> and <code>2</code>, and between nodes <code>1</code> and <code>2</code> as defined in the section <code>NODES</code>, respectively.</p>"},{"location":"creating_the_spring_model_csv_file/#the-angular-springs-section","title":"The <code>ANGULAR SPRINGS</code> section","text":"<p>The <code>ANGULAR SPRINGS</code> section serves to define angular springs (also known as torsion springs), that is, springs whose elastic energy is a function of an angle. They are useful when modelling mechanical systems involving elastic bending, such as flexures for example. Those springs are defined by specifying three nodes A, B and C, which together, define the angle ABC (B is the vertex of the angle). More precisely, the angle ABC is the angle by which the segment BA must rotate counterclockwise (about B) to align with segment BC. The angle is always between 0 and 2\u03c0.</p> <p>Along with its three nodes, the mechanical behavior must be specified, and optionally the natural angle of the angular spring (in radians). If no natural angle is provided, the natural angle is automatically set to the angle defined by the three specified nodes. The mechanical behavior describes its intrinsic (torque)-(angle-change) relation. It can be a linear behavior (the angular spring follows Hooke's law) or a nonlinear one (see section Specifying a nonlinear mechanical behavior).</p> <p>To define a angular spring, a line with the following structure is added to the section <code>ANGULAR SPRINGS</code>.</p> <p><code>&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;, &lt;mechanical behavior&gt;, [natural angle]</code></p> <ul> <li><code>&lt;node index&gt;</code> is the index of node A.</li> <li><code>&lt;node index&gt;</code> is the index of node B.</li> <li><code>&lt;node index&gt;</code> is the index of node C.</li> <li><code>&lt;mechanical behavior&gt;</code> is the angular mechanical behavior of the angular spring. To specify a linear angular spring, the mechanical behavior is simply the spring constant (positive float), that is the slope of its (torque)-(angle-change) curve.</li> <li><code>[natural angle]</code> is the natural angle of the angular spring in radians (float in [0, 2\u03c0[).  It is an optional parameter; if not provided the natural angle of the angular spring will automatically be set to the angle defined by nodes A, B and C as created in the <code>NODES</code> section.</li> </ul> <p>Example: <pre><code>ANGULAR SPRINGS\n0-2-1, 1.5, PI/2\n</code></pre></p> <p>A linear angular spring is defined. The torque it creates will be determined by the difference between the angle 021 (vertex at node <code>2</code>) and its natural angle <code>PI/2</code> (90 deg). The angle-difference versus torque relation is defined by the spring constant set to <code>1.5</code>. Note that if no natural angle was specified, the natural angle would have been automatically set to the angle defined by the nodes <code>0</code>, <code>1</code> and <code>2</code> as defined in the section <code>NODES</code>.</p>"},{"location":"creating_the_spring_model_csv_file/#the-area-springs-section","title":"The <code>AREA SPRINGS</code> section","text":"<p>The <code>AREA SPRINGS</code> section serves to define area springs, that is, springs whose elastic energy is a function of their area. They are useful when modelling mechanical systems involving fluids and pneumatic or hydraulic components. Those springs are defined by specifying \\(n\\) nodes (\\(n \\ge 3\\)), which together define the area of a simple polygon. More precisely, the nodes are the vertices listed sequentially that form the single closed boundary of the polygon. The sequence of nodes should not be ending with the starting node. The polygon can be convex or concave, but not self-intersecting. The boundary of the polygon can be specified by listing the vertices clockwise or counterclockwise.</p> <p>Along with its \\(n\\) nodes, the mechanical behavior must be specified, and optionally the natural area of the area spring. If no natural area is provided, the natural area is automatically set to the area defined by the n specified nodes. The mechanical behavior describes its intrinsic (2d-pressure)-(area-change) relation. It can be a linear behavior (the area spring follows Hooke's law) or a nonlinear one (see section Specifying a nonlinear mechanical behavior).</p> <p>To define an area spring, a line with the following structure is added to the section <code>AREA SPRINGS</code>.</p> <p><code>&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;-..., &lt;mechanical behavior&gt;, [natural area]</code></p> <ul> <li><code>&lt;node index&gt;</code> is the index of a first node that form the boundary of the polygon,</li> <li><code>&lt;node index&gt;</code> is the index of the second node, following the first node along the boundary (clockwise or counter-clockwise),</li> <li><code>&lt;node index&gt;</code> is the index of the third node following the second node along the boundary (clockwise or counter-clockwise),</li> <li><code>&lt;node index&gt;</code> ... etc.</li> <li><code>&lt;mechanical behavior&gt;</code> is the areal mechanical behavior of the area spring. To specify a linear area spring, the mechanical behavior is simply the spring constant (positive float), that is the slope of its (2d-pressure)-(area-change) curve.</li> <li><code>[natural area]</code> is the natural area of the area spring (float).  It is an optional parameter; if not provided the natural area of the area spring will automatically be set to the area defined by the n nodes as created in the <code>NODES</code> section.</li> </ul> <p>Note</p> <p>To define an area spring associated to a polygon with holes, please refer to Area springs with holes paragraph in the Advanced topics.</p> <p>Example: <pre><code>AREA SPRINGS\n0-2-1, 3.0\n</code></pre></p> <p>A linear area spring is defined. The 2d-pressure it creates will be determined by the difference between the area of the polygon 0210 and its natural area. The area-change versus 2d-pressure relation is defined by the spring constant set to <code>3.0</code>. Here, no natural area was provided, so the natural area will be automatically set to the area of the polygon defined by the nodes <code>0</code>, <code>2</code>, and <code>1</code> as defined in the section <code>NODES</code>.</p>"},{"location":"creating_the_spring_model_csv_file/#the-path-springs-section","title":"The <code>PATH SPRINGS</code> section","text":"<p>The <code>PATH SPRINGS</code> section serves to define path springs, that is, springs whose elastic energy is a function of their polygonal chain's length. They are useful when modelling mechanical systems involving cable-driven actuation or pulleys. Those springs are defined by specifying  \\(n\\) nodes (\\(n \\ge 2\\)), which together define a polygonal chain. More precisely, the nodes are the vertices listed sequentially that form the chain. The sequence of nodes does not need to (but can) be closed (first and last node can be different or identical).</p> <p>Along with its \\(n\\) nodes, the mechanical behavior must be specified, and optionally the natural length of the path spring. If no natural length is provided, the natural length is automatically set to the length defined by the n specified nodes. The mechanical behavior describes its intrinsic tension-displacement relation. It can be a linear behavior (the path spring follows Hooke's law) or a nonlinear one (see section Specifying a nonlinear mechanical behavior).</p> <p>To define a path spring, a line with the following structure is added to the section <code>PATH SPRINGS</code>.</p> <p><code>&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;-..., &lt;mechanical behavior&gt;, [natural length]</code></p> <ul> <li><code>&lt;node index&gt;</code> is the index of a first node that form the polygonal chain,</li> <li><code>&lt;node index&gt;</code> is the index of the second node, following the first node along the chain,</li> <li><code>&lt;node index&gt;</code> is the index of the third node following the second node along the chain,</li> <li><code>&lt;node index&gt;</code> ... etc.</li> <li><code>&lt;mechanical behavior&gt;</code> is the mechanical behavior of the path spring. To specify a linear path spring, the mechanical behavior is simply the spring constant (positive float), that is the slope of its tension-displacement curve.</li> <li><code>[natural length]</code> is the natural length of the path spring (float).  It is an optional parameter; if not provided the natural length of the path spring will automatically be set to the length defined by the n nodes as created in the <code>NODES</code> section.</li> </ul> <p>Example: <pre><code>PATH SPRINGS\n0-2-1, 1.0\n</code></pre></p> <p>A linear path spring is defined. The tension it creates will be determined by the difference between its current and natural lengths. The displacement versus tension relation is defined by the spring constant set to <code>1.0</code>. Here, no natural length was provided, so the natural length will be automatically set to the length of the polygonal chain defined by the nodes <code>0</code>, <code>2</code>, and <code>1</code> as defined in the section <code>NODES</code>.</p>"},{"location":"creating_the_spring_model_csv_file/#the-distance-springs-section","title":"The <code>DISTANCE SPRINGS</code> section","text":"<p>The <code>DISTANCE SPRINGS</code> section serves to define distance springs, that is, springs whose elastic energy is a function of the signed distance between a point and an infinite line. They are useful when modelling mechanical systems involving contact. Those springs are defined by specifying 3 nodes. The first node is the point while the last two nodes define the line. If the node is on the left of the vector formed by the last two nodes, the distance is positive, else negative.</p> <p>Along with its three nodes, the mechanical behavior must be specified, and optionally the natural length of the distance spring. If no natural length is provided, the natural length is automatically set to the length defined by the three specified nodes. The mechanical behavior describes its intrinsic force-displacement relation. It can be a linear behavior (the distance spring follows Hooke's law) or a nonlinear one (see section Specifying a nonlinear mechanical behavior. To model contact, it is convenient to use a CONTACT nonlinear behavior.</p> <p>To define a distance spring, a line with the following structure is added to the section <code>DISTANCE SPRINGS</code>:</p> <p><code>&lt;node index&gt;-&lt;node index&gt;-&lt;node index&gt;, &lt;mechanical behavior&gt;, [natural length]</code>.</p> <ul> <li><code>&lt;node index&gt;</code> is the index of a first node (the point),</li> <li><code>&lt;node index&gt;</code> is the index of the second node (to form the line),</li> <li><code>&lt;node index&gt;</code> is the index of the third node (to form the line),</li> <li><code>&lt;mechanical behavior&gt;</code> is the mechanical behavior of the distance spring. To specify a linear distance spring, the mechanical behavior is simply the spring constant (positive float), that is the slope of its force-displacement curve.</li> <li><code>[natural length]</code> is the natural length of the distance spring (float).  It is an optional parameter; if not provided the natural length of the distance spring will automatically be set to the distance defined by the three nodes as created in the <code>NODES</code> section.</li> </ul> <p>Example: <pre><code>DISTANCE SPRINGS\n0-2-1, CONTACT(f0=3.0; uc=0.02; delta=0.0)\n</code></pre></p> <p>A distance spring is defined. The force it generates is described by a CONTACT nonlinear behavior. In this case, the repulsion force remains 0 as long as the signed distance is larger than <code>delta=0.0</code>. Once the signed distance is lower than <code>delta=0.0</code>, the repulsion force will grow cubically with the compression displacement, reaching <code>f0=3.0</code> when the distance is <code>delta-uc=-0.02</code>.</p>"},{"location":"creating_the_spring_model_csv_file/#the-loading-section","title":"The <code>LOADING</code> section","text":"<p>The <code>LOADING</code> section serves to set the forces applied on some specific nodes along a specific direction (horizontal or vertical). To define a horizontal or vertical force on a node, a line with the following structure is added to the section <code>LOADING</code>.</p> <p><code>&lt;node index&gt;, &lt;direction&gt;, &lt;force&gt;, [max displacement]</code></p> <ul> <li><code>&lt;node index&gt;</code> is the index of the node on which the force is applied.</li> <li><code>&lt;direction&gt;</code> is either:</li> <li><code>X</code> for a horizontal force,</li> <li><code>Y</code> for a vertical force.</li> <li><code>&lt;force&gt;</code> the signed amplitude of the force (negative or positive float)</li> <li><code>[max displacement]</code> is the maximum displacement of the specified node along the specified direction (positive float). Beyond this value, the simulation will finish (even if the force has not been reached yet). It is an optional parameter; if not provided, there is no maximum displacement at which the simulation can finish prematurely (it is the same as setting the maximum displacement to a value close to infinity).</li> </ul> <p>Example: <pre><code>LOADING\n2, Y, -10.0, -3.0\n</code></pre></p> <p>A force is applied on node <code>2</code>, along the <code>Y</code>-direction (vertical). The magnitude of the force is <code>-10</code> (it is a negative value, so the force points downward). The maximum displacement is set to <code>-3.0</code>, meaning that if node <code>2</code> is displaced downward by more that <code>3.0</code>, the simulation is assumed to have completed.</p> <p>Note</p> <p>More complex loading can be specified (preloading, multiple loading steps, blocking nodes). Please refer to Complex loading descriptions paragraph in the Advanced topics for more details.</p>"},{"location":"creating_the_spring_model_csv_file/#a-complete-example","title":"A complete example","text":"<p>This example describes a spring structure composed of two inclined linear longitudinal springs connected in the center, and hinging through a linear angular spring. <pre><code># spring model example (this is a comment)\n\nPARAMETERS\nwidth, 2.0\nheight, 1.0\nstiffness, 7.3\n\nNODES\n0, -width/2, 0.0, 1, 1\n1, +width/2, 0.0, 1, 1\n2, 0.0, height, 1, 0\n\nSPRINGS\n0-2, stiffness\n1-2, stiffness\nANGULAR SPRINGS\n0-2-1, 1.5, PI/2\n\nLOADING\n2, Y, -10.0, -3.0\n</code></pre></p>"},{"location":"creating_the_spring_model_csv_file/#additional-notes","title":"Additional notes","text":"<ul> <li>Empty lines have no semantic meaning. Adding/removing some will not change the spring model.</li> <li><code>#</code> is used to indicate a line comment. Each line starting with <code>#</code> will be ignored when reading the file.</li> <li>Parameters can be combined in mathematical expression in all sections but <code>PARAMETERS</code>. Supported operations include <code>(...)</code>, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>SIN(...)</code> (sine), <code>COS(...)</code> (cosine), <code>TAN(...)</code> (tangent), <code>SQRT(...)</code> (square root).  Value \u03c0 can be used without defining it in the section <code>PARAMETERS</code> with the keyword <code>PI</code>.</li> <li>If your spring assembly does not include a certain type of spring, feel free to leave the corresponding section empty (header only) or to omit it completely (no header and no content).</li> </ul>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>Use <code>pip</code> to install. Open the terminal, enter</p> <p><pre><code>pip install springable\n</code></pre> in your activated virtual environment, and you are good to go!</p> <p>It is supported on Python 3.10 and above.</p> Install <code>springable</code> in a virtual environment (easy &amp; recommended) <p>It is recommended to install <code>springable</code> in a virtual environment. Create a folder, use the terminal to navigate to that folder and enter</p> WindowsMacbook/Apple <p><pre><code>python -m venv venv\n</code></pre> to create the virtual environment. A folder named <code>venv</code> is automatically created in your folder. To activate the virtual environment, run</p> <p><pre><code>venv\\Scripts\\activate\n</code></pre> in the terminal. From now on, every installation only lives in the virtual environment. Install <code>springable</code> by entering <pre><code>pip install springable\n</code></pre> in the terminal.</p> <p><pre><code>python3 -m venv venv\n</code></pre> to create the virtual environment. A folder named <code>venv</code> is automatically created in your folder. To activate the virtual environment, run <pre><code>source venv/bin/activate\n</code></pre> in the terminal. From now on, every installation only lives in the virtual environment. Install <code>springable</code> by entering <pre><code>pip install springable\n</code></pre> in the terminal.</p> <p>A virtual environment is like a mini Python setup just for one project. It keeps its own copy of Python and its own folder for packages. This way:</p> <ul> <li>you can install packages without touching the global Python installation;</li> <li>different projects can use different versions of the same package without conflicts;</li> <li>when you\u2019re done, you can just deactivate the environment by entering <pre><code>deactivate\n</code></pre> in the terminal. You can re-activate it later as shown above (no need to re-create it of course).</li> </ul> Error message: 'Could not find a version that satisfies the requirement springable'? <p>If you see a message similar to <pre><code>ERROR: Could not find a version that satisfies the requirement springable (from versions: none)\nERROR: No matching distribution found for springable\n</code></pre> after entering <code>pip install springable</code>, you most likely have a version of Python that is too old for <code>springable</code>. This is an easy fix. You can simply upgrade to a more recent version of Python (&gt;= 3.10.0), by following the instructions in the help box named \"How to install/upgrade Python\"</p> <p>Note: newer Python versions are compatible with code running on older versions, so the newer Python version will still be able to run your older code. In any case, you can always create a virtual environment encapsulating the newer Python version, so that it does not affect anything outside that environment.</p> Not familiar with using the terminal? No problem! <p>The terminal is a program that allows you to type and run some commands to perform some actions on your computer, such as creating a folder, opening a file, navigating folders, installing other programs, starting a program, etc.</p> <p>How to start the terminal?</p> WindowsMacbook/Apple <p>If you use Windows, simply search for \"Command Prompt\" in the bottom-left search bar and double-click on the search result to start the terminal. The program is an empty window, waiting for you to type a command and press Enter to run it.</p> <p>If you use a Macbook or another Apple computer, press Cmd+Space, search for \"Terminal\" and open the program. The program is an empty window, waiting for you to type a command and press Enter to run it.</p> Not familiar with Python? No problem! <p>Python is a program that can read and run Python scripts. A Python script is a text file saved under a name that ends with the extension <code>.py</code>, such as <code>my_python_script.py</code> for example: my_python_script.py<pre><code>    x = 1\n    y = 2\n    z = x + y\n    print(f\"Result: {z}\")\n</code></pre></p> <p>You do not need to have Python installed on your computer to create such a file. You can create a Python script by simply writing some text in a normal text editor such as Notepad (Windows) or TextEdit (Macbook), and save the file with a name that ends with <code>.py</code>.</p> <p>You need however to have Python installed on your computer to run a Python script. You can find instructions on how to install Python on your computer in the next help box.</p> <p>The text you write in a Python script needs to follow some rules and syntax in order for Python to be able to understand and execute it. Those rules form the Python programming language. To run spring simulations with <code>springable</code>, you won't have to write any Python scripts yourself. You can just copy-paste the scripts shown in this guide. No knowledge of the Python language is required. If you want to know more about Python, even though it is not required, you can find great tutorials online, such as this one.</p> Do I have Python installed on my computer? If so, which version? <p>The quickest way to check whether Python is installed on your computer is to open the terminal,  type</p> WindowsMacbook/Apple <pre><code>python --version\n</code></pre> <pre><code>python3 --version\n</code></pre> <p>and press Enter.</p> <p>If your terminal replies with something similar to</p> WindowsMacbook/Apple <pre><code>'python' is not recognized as an internal or external command, operable program or batch file.\n</code></pre> <pre><code>command not found: python\n</code></pre> <p>it means that Python is not installed on your computer. You will have to install it first. It is not complicated: the instructions are available in the next help box.</p> <p>Instead, if your terminal replies with <pre><code>Python a.b.c\n</code></pre> (where <code>a</code>, <code>b</code>, and <code>c</code> are numbers), then Python is installed on your computer.</p> <p>To use <code>springable</code>, the Python version must be more recent than 3.10.0!</p> <p>So, if the terminal replied with <code>Python 2.7.1</code> or <code>Python 3.9.12</code> for example, you will have to install a more recent version of Python. It is not complicated: the instructions are available in the next help box. As Python is backward compatible, upgrading to a more recent version should in principle not affect the way previous Python programs (that you might have already created) run.</p> <p>If the terminal replied with <code>Python 3.10.0</code> or <code>Python 3.13.4</code> for example, you are good to go. We recommend to create a virtual environment first before running <code>pip install springable</code>, as detailed in the help box named \"Install <code>springable</code> in a virtual environment\".</p> How to install/upgrade Python? <p>If you do not have Python installed or if your Python version is older than 3.10, you need to install the latest version of Python. The easiest and recommended way to do that is to simply download Python from the official website python.org/downloads.</p> <p>Double-click on what has been downloaded and follow the instructions that will appear on screen.</p> <p>After the installation is completed, re-open the terminal and run</p> WindowsMacbook/Apple <pre><code>python --version\n</code></pre> <pre><code>python3 --version\n</code></pre> <p>The terminal should reply with <code>Python a.b.c</code> (where <code>a</code>, <code>b</code>, <code>c</code> are numbers). The version should be greater than 3.10.0.</p> <p>If it shows a version older than 3.10.0, you most likely need to fix the <code>PATH</code>. This tutorial will guide you through it easily.</p> Installation via Anaconda/miniconda or in Jupyter notebook? <p>If you want to install <code>springable</code> in your <code>conda</code> environment, you can simply activate your <code>conda</code> environment and install via <code>pip</code>: <pre><code>conda activate my_env\npip install springable\n</code></pre></p> <p>The package <code>springable</code> also works perfectly fine in a Jupyter notebook. You can install it using <pre><code>!pip install springable\n</code></pre> in a cell at the start of your document.</p>"},{"location":"getting_started/#try-online-without-any-installation","title":"Try online without any installation","text":"<p>You don't want to install it right now? No problem, try <code>springable</code> online, without any installation in an interactive online notebook</p>"},{"location":"getting_started/#running-a-simulation","title":"Running a simulation","text":"<p>To start a simulation, we first create the file  that will describe the spring model we want to simulate. To do that, we create a simple CSV file, (a text file saved with extension .csv), that looks like this for example.</p> my_spring_model.csv<pre><code>PARAMETERS\nstiffness, 1.0\nNODES\n0, 0.0, 0.0, 1, 1\n1, 1.0, 0.0, 0, 1\nSPRINGS\n0-1, stiffness\nLOADING\n1, X, 1.5\n</code></pre> <p>This file defines a spring structure composed of only one horizontal spring, clamped on the left and loaded in tension from the right.</p> <p>How to read or make such a file is described in the paragraph Creating a CSV file describing the spring model. Many CSV file examples that describe spring structures are already available on this page, to help get started and familiar with the syntax and language.</p> <p>Next, we create a Python script (a text file saved with the extension .py), with the following content my_first_simulation.py<pre><code>\"\"\"\nPython script example to learn how to use the package springable\n\"\"\"\nimport springable.simulation as ss\n\nss.simulate_model(model_path='my_spring_model.csv',\n                  save_dir='my_simulation_result')\n</code></pre> and save it under the name - let's say - <code>my_first_spring_simulation.py</code></p> <p>The function <code>ss.simulate_model()</code> takes in two arguments:</p> <ul> <li> <p>The <code>model_path</code> argument is the path leading to the CSV file that describes the model you want to simulate. In this case, we used the CSV file <code>my_spring_model.csv</code> that we have just created.</p> </li> <li> <p>The <code>save_dir</code> argument is simply the name of the folder under which the simulation results will be saved. It should not exist yet; it will be created automatically when we run the script. It is an optional argument, if not specified, a folder will be created automatically in the working directory to store the result files.</p> </li> </ul> <p>Finally, we run the Python script. This can be done in the terminal by simply executing <pre><code>python my_first_spring_simulation.py\n</code></pre></p> <p>Tip</p> <p>Many settings can be tuned before running a simulation. See paragraph Configuring simulation settings for more details.</p>"},{"location":"getting_started/#quickly-viewing-the-results","title":"Quickly viewing the results","text":"<p>After running the command, three media files are generated, shown and saved.</p> <ul> <li>The drawing depicting the spring structure about to be simulated (before solver starts)</li> <li>The force-displacement curve of the structure (after solver finishes)</li> <li>The animation of the model as it is loaded (after solver finishes)</li> </ul> <ul> <li> <p>spring structure drawing</p> <p></p> </li> <li> <p>force-displacement curve</p> <p></p> </li> </ul> <ul> <li> <p>animation</p> <p></p> </li> </ul> <p>Tip</p> <p>Many settings can be tuned to change of the appearance of the spring structure, plots settings, colors, animation fps and resolution, etc. See page Configuring simulation settings for more details.</p>"},{"location":"many_examples/","title":"Some examples","text":"<p>Here are shown many examples to help you get started and familiar with defining a spring model in <code>springable</code>. To run and simulate an example, copy the corresponding code in a text file and save it under the name <code>example.csv</code>. Then, run this Python script: <pre><code>from springable.simulation import simulate_model\n\nsimulate_model('example.csv')\n</code></pre></p> Just want to be shown many examples and simulations? <p>Examples can also be automatically simulated and shown to you by running this Python script: <pre><code>from springable.discover import show_examples\n\nshow_examples()\n</code></pre></p> <p>More complex spring structures can be shown by running: <pre><code>from springable.discover import show_gallery\n\nshow_gallery()\n</code></pre></p> <p>Some help if you are not sure how to run a Python script or get set up is provided here.</p>"},{"location":"many_examples/#single-longitudinal-springs","title":"Single longitudinal springs","text":""},{"location":"many_examples/#with-linear-behavior","title":"with linear behavior","text":"<pre><code>PARAMETERS\nstiffness, 1.0\nNODES\n0, 0.0, 0.0, 1, 1\n1, 5.0, 0.0, 0, 1\nSPRINGS\n0-1, stiffness\nLOADING\n1, X, +2.0\n</code></pre>"},{"location":"many_examples/#with-a-piecewise-softening-behavior","title":"with a piecewise softening behavior","text":"<pre><code>PARAMETERS\ninitial_stiffness, 2.0\nfinal_stiffness, 0.2\ntransition_displacement, 1.0\nNODES\n0, 0.0, 0.0, 1, 1\n1, 5.0, 0.0, 0, 1\nSPRINGS\n0-1, PIECEWISE(k_i=[initial_stiffness;final_stiffness];u_i=[transition_displacement];us=0.2)\nLOADING\n1, X, 2.50\n</code></pre>"},{"location":"many_examples/#with-a-piecewise-stiffening-behavior","title":"with a piecewise stiffening behavior","text":"<pre><code>PARAMETERS\ninitial_stiffness, 0.2\nfinal_stiffness, 2.0\ntransition_displacement, 1.0\nNODES\n0, 0.0, 0.0, 1, 1\n1, 5.0, 0.0, 0, 1\nSPRINGS\n0-1, PIECEWISE(k_i=[initial_stiffness;final_stiffness];u_i=[transition_displacement];us=0.2)\nLOADING\n1, X, 2.50\n</code></pre>"},{"location":"many_examples/#with-a-piecewise-nonmonotonic-behavior","title":"with a piecewise nonmonotonic behavior","text":"<pre><code>PARAMETERS\nstiffness0, 1.0\nstiffness1, -0.75\nstiffness2, 1.5\ncritical_displacement_loading, 1.0\ncritical_displacement_unloading, 2.0\nNODES\n0, 0.0, 0.0, 1, 1\n1, 5.0, 0.0, 0, 1\nSPRINGS\n0-1, PIECEWISE(k_i=[stiffness0;stiffness1;stiffness2];u_i=[critical_displacement_loading; critical_displacement_unloading];us=0.1)\nLOADING\n1, X, 2.50\n</code></pre>"},{"location":"many_examples/#with-a-complex-multi-valued-zigzag-behavior","title":"with a complex multi-valued zigzag behavior","text":"<pre><code>NODES\n0, 0.0, 0.0, 1, 1\n1, 5.0, 0.0, 0, 1\nSPRINGS\n0-1, ZIGZAG2(u_i=[1.129E+00; 8.194E-01; 1.697E+00; 1.955E+00; 2.690E+00; 3.413E+00; 3.000E+00; 3.439E+00; 3.787E+00]; f_i=[1.708E+00; 3.312E-01; 1.344E+00; 5.779E-01; 1.708E+00; 1.929E+00; 1.136E+00; 6.948E-01; 1.565E+00]; epsilon=5.000E-02)\nLOADING\n1, X, 2.0\n</code></pre>"},{"location":"many_examples/#basic-geometrically-nonlinear-structures","title":"Basic geometrically nonlinear structures","text":""},{"location":"many_examples/#two-springs-connected-at-an-angle-and-a-flexure","title":"two springs connected at an angle and a flexure","text":"<pre><code>PARAMETERS\n    width, 8.0\n    triangle_height, 3.0\n    triangle_side_stiffness, 9.0\n    hinge_stiffness, 7.5\nNODES\n    0,0.0,0.0,1,1\n    1,width/2,triangle_height,1,0\n    2,width,0.0,1,1\nSPRINGS\n    1-2,triangle_side_stiffness\n    1-0,triangle_side_stiffness\nANGULAR SPRINGS\n    0-1-2, hinge_stiffness\nLOADING\n    1, Y, -9.0\n</code></pre>"},{"location":"many_examples/#von-mises-truss","title":"Von-Mises truss","text":"<pre><code>PARAMETERS\n    width, 8.0\n    triangle_height, 3.0\n    vertical_element_length, 8.0\n    triangle_side_stiffness, 9.0\n    vertical_element_stiffness, 1.4, [1;2.5;4]\n    hinge_stiffness, 7.5\nNODES\n    0,0.0,0.0,1,1\n    1,width/2,triangle_height,1,0\n    2,width,0.0,1,1\n    3,width/2,triangle_height + vertical_element_length,1,0\nSPRINGS\n    1-2,triangle_side_stiffness\n    1-0,triangle_side_stiffness\n    1-3,vertical_element_stiffness\nANGULAR SPRINGS\n    0-1-2, hinge_stiffness\nLOADING\n    3, Y, -10.0\n</code></pre>"},{"location":"many_examples/#buckling","title":"Buckling","text":"<pre><code>PARAMETERS\n    stiffness, 10.0\n    hinge_stiffness, 1.0\n    l, 5.0\nNODES\n    0,0.0,0.0,1,1\n    1,0.0,l/2,0,0\n    2,0.0,l,1,0\nSPRINGS\n    1-2,stiffness\n    1-0,stiffness\nANGULAR SPRINGS\n    0-1-2, hinge_stiffness, PI*0.99\nLOADING\n    2, Y, -5.0, -0.9*l\n</code></pre>"},{"location":"many_examples/#different-type-of-springs","title":"Different type of springs","text":""},{"location":"many_examples/#angular-spring-to-model-nonlinear-flexures","title":"angular spring (to model (non)linear flexures)","text":"<pre><code>NODES\n0, -1.0, 0.0, 1, 1\n1, 1.0, 0.0, 0, 1\n2, 0.0, 0.15, 0, 0\nANGULAR SPRINGS\n1-2-0, BEZIER2(u_i=[2.0E-01; 10E-01; 10E-01; -13.33E-02; -2E-01; 3.3E-01; 6.774E-01]; f_i=[2.749E+00; 3.297E+00; 1.515E-01; 1.623E+00; 1.190E+00; -2.648E+00; 1.364E+00])\nSPRINGS\n0-2, k=1\n2-1, k=1\nLOADING\n2, Y, -5\n</code></pre>"},{"location":"many_examples/#area-spring-to-model-pressure-actuation","title":"area spring (to model pressure actuation)","text":"<pre><code>NODES\n0, 0.0, 0.0, 0, 0\n1, -1.0, -1.5, 1, 1\n2, +1.0, -1.5, 1, 1\n3, 0.0, -1, 1, 0\nANGULAR SPRINGS\n1-0-2, k=0.05\nSPRINGS\n1-0, k=.6\n2-0, k=.6\nAREA SPRINGS\n0-1-3-2, ISOTHERMAL(n=2;R=1;T0=1)\nLOADING\n3, Y, -1.0, -3.0\n</code></pre>"},{"location":"many_examples/#path-spring-to-model-cable-rope-and-pulleys","title":"path spring (to model cable, rope and pulleys)","text":"<pre><code>NODES\n0, 0.0, 0.0, 1, 1\n1, 0.5, 0.5, 0, 0\n2, -1.5, 0.0, 1, 1\n3, -2, 0.0, 0, 1\nSPRINGS\n0-1, LINEAR(k=20.0)\nANGULAR SPRINGS\n1-0-2, LINEAR(k=0.2)\nPATH SPRINGS\n1-2-3, PIECEWISE(k_i=[.02;10];u_i=[0.5];us=.01)\nLOADING\n3, X, -1.25\n</code></pre>"},{"location":"many_examples/#distance-spring-to-model-contact","title":"distance spring (to model contact)","text":"<pre><code>NODES\n0, 0.0, 0.0, 1, 1\n1, 1.0, 0.35, 0, 0\n2, 2.0, 0.0, 0, 1\n3, 0.0, .5, 1, 1\n4, 2.0, 1, 1, 1\nSPRINGS\n0-1, 20\n1-2, 20\nANGULAR SPRINGS\n0-1-2, 2\nDISTANCE SPRINGS\n1-4-3, CONTACT(f0=3;uc=.05;delta=0)\nLOADING\n2, X, -10.0, -1.9\n</code></pre>"},{"location":"many_examples/#inflatables","title":"Inflatables","text":""},{"location":"many_examples/#pneunet-actuator","title":"pneunet actuator","text":"<pre><code>PARAMETERS\nchamber_length, 1.0\nchamber_height, 1.0\nsyringe_height, 5.0\nsyringe_length, 3.0\nk0, 1.0\nk1, 5.0\nk_rot, 0.2\nk_area, 20.0\nNODES\n0, 0*chamber_length, chamber_height / 2, 1, 1\n1, 1*chamber_length, chamber_height / 2, 0, 0\n2, 2*chamber_length, chamber_height / 2, 0, 0\n3, 3*chamber_length, chamber_height / 2, 0, 0\n4, 4*chamber_length, chamber_height / 2, 0, 0\n5, 4*chamber_length, -chamber_height / 2, 0, 0\n6, 3*chamber_length, -chamber_height / 2, 0, 0\n7, 2*chamber_length, -chamber_height / 2, 0, 0\n8, 1*chamber_length, -chamber_height / 2, 0, 0\n9, 0*chamber_length, -chamber_height / 2, 1, 1\n10, 0*chamber_length, -syringe_height / 2, 1, 1\n11, -syringe_length, -syringe_height / 2, 0, 1\n12, -syringe_length, 0.0, 0, 1\n13, -syringe_length, +syringe_height / 2, 0, 1\n14, 0*chamber_length, +syringe_height / 2, 1, 1\nSPRINGS\n0-1, k0\n1-2, k0\n2-3, k0\n3-4, k0\n9-8, k1\n8-7, k1\n7-6, k1\n6-5, k1\n1-8, k1\n2-7, k1\n3-6, k1\n4-5, k1\nANGULAR SPRINGS\n1-0-14, k_rot\n2-1-0, k_rot\n3-2-1, k_rot\n4-3-2, k_rot\n5-4-3, k_rot\n6-5-4, k_rot\n7-6-5, k_rot\n8-7-6, k_rot\n9-8-7, k_rot\n10-9-8, k_rot\n10-11-12, 100\n11-12-13, 100\n12-13-14, 100\nAREA SPRINGS\n0-1-2-3-4-5-6-7-8-9-10-11-12-13-14, k_area\nLOADING\n12, X, 12.0, syringe_length\n</code></pre>"},{"location":"many_examples/#dome-under-pressure","title":"dome under pressure","text":"<pre><code>PARAMETERS\ndiameter, 10.0\nalpha0, 0.675\nstiffness0, 0.5\nstiffness1, 0.025\nNODES\n0,diameter/2 * COS(alpha0 + (PI-2*alpha0) / 4 * 0),diameter/2 * SIN(alpha0 + (PI-2*alpha0) / 4 * 0),1,1\n1,diameter/2 * COS(alpha0 + (PI-2*alpha0) / 4 * 1),diameter/2 * SIN(alpha0 + (PI-2*alpha0) / 4 * 1),0,0\n2,diameter/2 * COS(alpha0 + (PI-2*alpha0) / 4 * 2),diameter/2 * SIN(alpha0 + (PI-2*alpha0) / 4 * 2),0,0\n3,diameter/2 * COS(alpha0 + (PI-2*alpha0) / 4 * 3),diameter/2 * SIN(alpha0 + (PI-2*alpha0) / 4 * 3),0,0\n4,diameter/2 * COS(alpha0 + (PI-2*alpha0) / 4 * 4),diameter/2 * SIN(alpha0 + (PI-2*alpha0) / 4 * 4),1,1\n5,X4,Y4-diameter/7,1,0\n6,(X0+X4)/2,Y4-diameter/7,1,0\n7,X0,Y4-diameter/7,1,0\nSPRINGS\n0-1,k=4.0*stiffness0\n1-2,k=4.0*stiffness0\n2-3,k=4.0*stiffness0\n3-4,k=4.0*stiffness0\nANGULAR SPRINGS\n7-0-1,k=2.94*stiffness1\n0-1-2,k=2.96*stiffness1\n1-2-3,k=3.06*stiffness1\n2-3-4,k=3.0*stiffness1\n3-4-5,k=3.03*stiffness1\n6-5-4,k=40\n7-6-5,k=40\n0-7-6,k=40\nAREA SPRINGS\n0-1-2-3-4-5-6-7, ISOTHERMAL(n=1.404E-01; R=1.000E+00; T0=4.000E+00)\nLOADING\n6,Y,-0.25, -diameter*1.2\n</code></pre>"},{"location":"many_examples/#another-dome-under-pressure","title":"another dome under pressure","text":"<pre><code>PARAMETERS\ndiameter, 10.0\nalpha0, 0.675\nstiffness0, 0.5\nstiffness1, 0.025\nNODES\n0,diameter/2 * COS(alpha0 + (PI-2*alpha0) / 4 * 0),diameter/2 * SIN(alpha0 + (PI-2*alpha0) / 4 * 0),1,1\n1,diameter/2 * COS(alpha0 + (PI-2*alpha0) / 4 * 1),diameter/2 * SIN(alpha0 + (PI-2*alpha0) / 4 * 1),0,0\n2,diameter/2 * COS(alpha0 + (PI-2*alpha0) / 4 * 2),diameter/2 * SIN(alpha0 + (PI-2*alpha0) / 4 * 2),0,0\n3,diameter/2 * COS(alpha0 + (PI-2*alpha0) / 4 * 3),diameter/2 * SIN(alpha0 + (PI-2*alpha0) / 4 * 3),0,0\n4,diameter/2 * COS(alpha0 + (PI-2*alpha0) / 4 * 4),diameter/2 * SIN(alpha0 + (PI-2*alpha0) / 4 * 4),1,1\n5,X4,Y4-diameter/7,1,0\n6,(X0+X4)/2,Y4-diameter/7,1,0\n7,X0,Y4-diameter/7,1,0\nSPRINGS\n0-1,k=4.0*stiffness0\n1-2,k=4.0*stiffness0\n2-3,k=4.0*stiffness0\n3-4,k=4.0*stiffness0\nANGULAR SPRINGS\n7-0-1,k=2.94*stiffness1\n0-1-2,k=2.96*stiffness1\n1-2-3,k=3.01*stiffness1\n2-3-4,k=3.0*stiffness1\n3-4-5,k=3.02*stiffness1\n6-5-4,k=40\n7-6-5,k=40\n0-7-6,k=40\nAREA SPRINGS\n0-1-2-3-4-5-6-7, ISOTHERMAL(n=0.175; R=1.000E+00; T0=4.000E+00)\nLOADING\n6,Y,-0.25, -diameter*0.4\n</code></pre>"},{"location":"many_examples/#snapping-sequencing-buckling-and-contact","title":"Snapping, sequencing, buckling and contact","text":""},{"location":"many_examples/#sequencing-with-nonmonotonic-bezier-springs","title":"sequencing with nonmonotonic Bezier springs","text":"<pre><code>NODES\n0, 0.0, 0.0, 1, 1\n1, 5.0, 0.0, 0, 1\n2, 10.0, 0.0, 0, 1\nSPRINGS\n0-1, BEZIER(u_i=[1.8E+00; 0.5E+00; 3.000E+00]; f_i=[1.7E+00; -1.E+00; 1.000E+00])\n1-2, BEZIER(u_i=[0.6E+00; 1.7E+00; 3.000E+00]; f_i=[2.4E+00; -1.7E+00; 1.000E+00])\nLOADING\n2, X, 1.\n</code></pre>"},{"location":"many_examples/#bumping-beams","title":"bumping beams","text":"<pre><code>PARAMETERS\nd, 0.75\nk, 5.0\nNODES\n0, 0.0, 0.0, 1, 1\n1, 0.001, 1.0, 0, 0\n2, 0.0, 2.0, 1, 0\n3, d, 0.0, 1, 1\n4, d-0.001, 1.0, 0, 0\n5, d, 2.0, 1, 0\n6, d/2, 2.0, 1, 0\nSPRINGS\n0-1, 10.0\n1-2, 10.0\n3-4, 10.0\n4-5, 10.0\nY DISTANCE SPRINGS\n6-2, 250\n6-5, 250\nANGULAR SPRINGS\n0-1-2, 0.5\n3-4-5, 0.6\nX DISTANCE SPRINGS\n4-1, CONTACT(f0=5;uc=0.025;delta=0)\nLOADING\n6, Y, -6.0, -1.5\n</code></pre>"},{"location":"many_examples/#beam-in-compression-with-wall","title":"beam in compression with wall","text":"<pre><code>PARAMETERS\nks, 10.0\nkr, 1.0\ndl, 1.0\ndy, 1.0\nNODES\n0, 0*dl, 0.0, 1, 1\n1, 1*dl, 0.0, 0, 1\n2, 2*dl, 0.0, 0, 0\n3, 3*dl, 0.0, 0, 0\n4, 4*dl, 0.0, 0, 0\n5, 5*dl, 0.0, 0, 0\n6, 6*dl, 0.0, 0, 0\n7, 7*dl, 0.0, 0, 0\n8, 8*dl, 0.0, 0, 0\n9, 9*dl, 0.0, 0, 0\n10,10*dl,0.0, 0, 0\n11,11*dl,0.0, 0, 0\n12,12*dl,0.0, 0, 0\n13,13*dl,0.0, 0, 0\n14,14*dl,0.0, 0, 1\n15,15*dl,0.0, 0, 1\n16, 7.5*dl, -dy, 1, 1\nSPRINGS\n0-1,  ks\n1-2,  ks\n2-3,  ks\n3-4,  ks\n4-5,  ks\n5-6,  ks\n6-7,  ks\n7-8,  ks\n8-9,  ks\n9-10, ks\n10-11,ks\n11-12,ks\n12-13,ks\n13-14,ks\n14-15,ks\nANGULAR SPRINGS\n0-1-2, kr*50\n1-2-3, kr\n2-3-4, kr, PI*0.95\n3-4-5, kr\n4-5-6, kr\n5-6-7, kr\n6-7-8, kr, PI*1.025\n7-8-9, kr\n8-9-10,kr, PI*1.025\n9-10-11,kr\n10-11-12,kr\n11-12-13,kr\n12-13-14,kr\n13-14-15,kr*50\nY DISTANCE SPRINGS\n2-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n3-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n4-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n5-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n6-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n7-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n8-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n9-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n10-16,CONTACT(f0=1.0; uc=dl/10; delta=0)\n11-16,CONTACT(f0=1.0; uc=dl/10; delta=0)\n12-16,CONTACT(f0=1.0; uc=dl/10; delta=0)\n13-16,CONTACT(f0=1.0; uc=dl/10; delta=0)\nLOADING\n15, X, -1.5, -6.5*dl\n</code></pre>"},{"location":"many_examples/#beam-in-compression-with-two-walls","title":"beam in compression with two walls","text":"<pre><code>PARAMETERS\nks, 10.0\nkr, 1.0\ndl, 1.0\ndy0, 1.0\ndy1, 1.75, [1.75;2.25;5]\nNODES\n0, 0*dl, 0.0, 1, 1\n1, 1*dl, 0.0, 0, 1\n2, 2*dl, 0.0, 0, 0\n3, 3*dl, 0.0, 0, 0\n4, 4*dl, 0.0, 0, 0\n5, 5*dl, 0.0, 0, 0\n6, 6*dl, 0.0, 0, 0\n7, 7*dl, 0.0, 0, 0\n8, 8*dl, 0.0, 0, 0\n9, 9*dl, 0.0, 0, 0\n10,10*dl,0.0, 0, 0\n11,11*dl,0.0, 0, 0\n12,12*dl,0.0, 0, 0\n13,13*dl,0.0, 0, 0\n14,14*dl,0.0, 0, 1\n15,15*dl,0.0, 0, 1\n16, 0, -dy0, 1, 1\n17, 0, +dy1, 1, 1\nSPRINGS\n0-1,  ks\n1-2,  ks\n2-3,  ks\n3-4,  ks\n4-5,  ks\n5-6,  ks\n6-7,  ks\n7-8,  ks\n8-9,  ks\n9-10, ks\n10-11,ks\n11-12,ks\n12-13,ks\n13-14,ks\n14-15,ks\nANGULAR SPRINGS\n0-1-2, LINEAR(k=15*kr)\n1-2-3, LINEAR(k=kr), PI*0.95\n2-3-4, LINEAR(k=kr)\n3-4-5, LINEAR(k=kr)\n4-5-6, LINEAR(k=kr)\n5-6-7, LINEAR(k=kr), PI*1.025\n6-7-8, LINEAR(k=kr), PI*1.025\n7-8-9, LINEAR(k=kr)\n8-9-10,LINEAR(k=kr), PI*1.05\n9-10-11,LINEAR(k=kr)\n10-11-12,LINEAR(k=kr)\n11-12-13,LINEAR(k=kr), PI*1.05\n12-13-14,LINEAR(k=kr)\n13-14-15,LINEAR(k=15*kr)\n\n\nY DISTANCE SPRINGS\n2-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n3-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n4-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n5-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n6-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n7-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n8-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n9-16, CONTACT(f0=1.0; uc=dl/10; delta=0)\n10-16,CONTACT(f0=1.0; uc=dl/10; delta=0)\n11-16,CONTACT(f0=1.0; uc=dl/10; delta=0)\n12-16,CONTACT(f0=1.0; uc=dl/10; delta=0)\n13-16,CONTACT(f0=1.0; uc=dl/10; delta=0)\n\n\n17-2, CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-3, CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-4, CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-5, CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-6, CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-7, CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-8, CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-9, CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-10,CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-11,CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-12,CONTACT(f0=1.0; uc=dl/10; delta=0)\n17-13,CONTACT(f0=1.0; uc=dl/10; delta=0)\nLOADING\n15, X, -1.5, -4.5*dl\n</code></pre>"},{"location":"many_examples/#snapping-square","title":"snapping square","text":"<pre><code>PARAMETERS\nside, 1.0\neccentricity, 0.1\nks, 5.0\nkh, 1.0\nNODES\n0, +side, -side, 0, 0\n1, +side, +side, 0, 0\n2, -side, +side, 0, 0\n3, -side, -side, 0, 0\n4, +side, 0.0, 0, 0\n5, 0.0, +side, 1, 0\n6, -side, 0.0, 0, 0\n7, 0.0, -side, 1, 1\n8, -eccentricity*side, 0.0, 0, 0\n9, (1-eccentricity)/2*side, 0.0005, 0, 0\nSPRINGS\n0-4, 10*ks\n4-1, 10*ks\n1-5, 10*ks\n5-2, 10*ks\n2-6, 10*ks\n6-3, 10*ks\n3-7, 10*ks\n7-0, 10*ks\n5-8, ks\n7-8, ks\n8-9, ks\n9-4, ks\nANGULAR SPRINGS\n4-0-7, 100*kh\n7-3-6, 100*kh\n6-2-5, 100*kh\n5-1-4, 100*kh\n0-4-1, kh\n1-5-2, kh\n2-6-3, kh\n3-7-0, kh\n8-9-4, kh/15\nDISTANCE SPRINGS\n9-4-5, CONTACT(f0=5.0; uc=0.02; delta=0.0)\nLOADING\n5, Y, -1.85, 3/4*side\n</code></pre>"},{"location":"specifying_a_nonlinear_mechanical_behavior/","title":"Specifying a nonlinear mechanical behavior","text":"<p>In <code>springable</code>, each spring (longitudinal, angular, etc) has its own intrinsic mechanical behavior. An intrinsic mechanical behavior is fully characterized by a generalized force-displacement curve. For a longitudinal spring, that curve will be interpreted as a force-displacement curve. For a angular spring, as a torque-angle change curve. For an area spring, as a 2d pressure-area change curve. Etc.</p> <p>Info</p> <p>Mathematically speaking, the generalized force \\(f\\) is defined as the derivative of the elastic energy with respect to the measure \\(\\alpha\\) of the spring. The measure \\(\\alpha\\) is the length for a longitudinal spring, the angle for a angular spring, the area for an area spring, etc. The generalized displacement \\(u\\) is defined as the difference between the current measure \\(\\alpha\\) and the natural measure \\(\\alpha_0\\), that is, the measure of the spring in its natural configuration (wherein no force is generated and no elastic energy is stored).</p> <p>Multiple types of intrinsic mechanical behavior can be specified in the spring model CSV file. The faster way to get familiar with them is by running the behavior creation graphical user interface. To do that create the following python script</p> <p><pre><code>\"\"\"\nPython script 'start_behavior_creation_interface.py'\n\"\"\"\nfrom springable.behavior_creation import start\n\nstart()\n</code></pre> and run it (in the terminal, that would be done using <code>python start_behavior_creation_interface.py</code>).</p> <p>A window named Behavior creation should pop up on your screen</p> <p></p> <p>By playing around with the interface, you will be able to create various generalized force-displacement curves and generate the corresponding code to use in the spring model CSV file. Herein below, more details are provided about the various types of mechanical behavior.</p> <ul> <li>Linear behavior</li> <li>Logarithmic behavior</li> <li>Bezier behavior</li> <li>Bezier2 behavior</li> <li>Piecewise behavior</li> <li>Zigzag behavior</li> <li>Zigzag2 behavior</li> <li>Contact behavior</li> <li>Isothermal gas behavior</li> <li>Isentropic gas behavior</li> </ul>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#linear-behavior","title":"Linear behavior","text":"<p>For a linear generalized force-displacement curve \\(f=ku\\), where \\(k\\) is the spring constant.</p> <p><code>LINEAR(k=&lt;value&gt;)</code> or <code>&lt;value&gt;</code></p> <p>Example: <code>..., LINEAR(k=2.0)</code> or equivalently <code>..., 2.0</code></p> <p>A spring with a linear behavior characterized by a spring constant <code>2.0</code> is defined.</p> <p></p> Units? <p>The unit of \\(k\\) should be the unit of the generalized force \\(f\\) divided by the unit of the generalized displacement \\(u\\).</p>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#logarithmic-behavior","title":"Logarithmic behavior","text":"<p>A logarithmic behavior is defined by a generalized force-displacement curve given by \\(f=k\\alpha_0\\ln(\\alpha/\\alpha_0)\\), \\(u=\\alpha-\\alpha_0\\). It is useful to prevent springs from having a zero measure (longitudinal springs with zero length, angular springs with zero angle, etc), as the generalized force approaches infinity as the measure gets close to zero.</p> <p><code>LOGARITHMIC(k=&lt;spring constant&gt;)</code></p> <p>Example: <code>... , LOGARITHMIC(k=2.0)</code></p> <p>A spring with a logarithmic behavior characterized by \\(k\\) equals <code>2.0</code> is defined.</p> <p></p> Isn't the parameter \\(\\alpha_0\\) missing? <p>It seems like we are missing the parameter \\(\\alpha_0\\) in the specification (only \\(k\\) is provided). This is not a problem; remember that the value of \\(\\alpha_0\\) is in fact automatically set to the value of the spring measure in the state defined by the <code>NODES</code> section, when not provided. If you want to assign a value for \\(\\alpha_0\\), you can do it by adding a comma followed by the \\(\\alpha_0\\) value.</p> <p>Example: <code>... , LOGARITHMIC(k=2.0), 2.5</code></p> <p>A spring is defined with a behavior of type <code>LOGARITHMIC</code> with <code>k=2.0</code> and a natural measure <code>2.5</code>.</p> Units? <p>The unit of \\(k\\) should be the unit of the generalized force \\(f\\) divided by the unit of the generalized displacement \\(u\\).</p>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#bezier-behavior","title":"Bezier behavior","text":"<p>A Bezier behavior is described by a generalized force-displacement curve defined as a Bezier curve. More precisely, the \\(f-u\\) curve is given by \\(f(t)=\\sum_{i=1}^n f_i b_{i,n}(t)\\) and \\(u(t)=\\sum_{i=1}^n u_i b_{i,n}(t)\\), where \\(u_i\\) and \\(f_i\\) describe the coordinates of control points, \\(b_{i,n}\\) are the Bernstein polynomials of degree \\(n\\), and \\(t\\) is the curve parameter that runs from 0 to 1.</p> <p><code>BEZIER(u_i=[&lt;value_11&gt;; &lt;value_12&gt;; ...;&lt;value_1n&gt;]; f_i=[&lt;value_21&gt;; &lt;value_22&gt;; ...; &lt;value_2n&gt;])</code></p> <p>Example: <code>..., BEZIER(u_i=[1.0;1.2;3.0];f_i=[2.0;-3.0;2.4])</code></p> <p>A spring is defined with a generalized force-displacement relation described as a Bezier curve of degree 3 with control points (0, 0), (<code>1.0</code>, <code>2.0</code>), (<code>1.2</code>, <code>-3.0</code>) and (<code>3.0</code>, <code>2.4</code>).</p> <p></p> Units? <p>The unit of each \\(u_i\\) should be the unit of the generalized displacement \\(u\\). The unit of each \\(f_i\\) should be the unit of the generalized force \\(f\\).</p> <p>Note</p> <p>For a generalized displacement \\(u\\) larger than \\(u_n\\), the corresponding generalized force is extrapolated linearly based on the slope at the last control point. Also, the generalized force-displacement relation is defined for negative generalized displacements \\(u&lt;0\\) by imposing the symmetry \\(f(u&lt;0)=-f(|u|)\\).</p>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#bezier2-behavior","title":"Bezier2 behavior","text":"<p>A Bezier2 behavior is the same as a Bezier behavior. The only difference is that, unlike a Bezier behavior, a Bezier2 behavior is allowed to define a curve that curves back, meaning that at a certain generalized displacement value, multiple force values can exist.</p> <p><code>BEZIER2(u_i=[&lt;value_11&gt;; &lt;value_12&gt;; ...;&lt;value_1n&gt;]; f_i=[&lt;value_21&gt;; &lt;value_22&gt;; ...; &lt;value_2n&gt;])</code></p> <p>Example: <code>..., BEZIER2(u_i=[2.5;-1.0;2.0];f_i=[2.0;-1.0;1.0])</code></p> <p>A spring is defined with a generalized force-displacement relation described as a Bezier curve of degree 3 with control points (0, 0), (<code>2.5</code>, <code>2.0</code>), (<code>-1.0</code>, <code>-1.0</code>) and (<code>2.0</code>, <code>1.0</code>). This curve curves back; it cannot be described a function \\(f(u)\\).</p> <p></p> Units? <p>The unit of each \\(u_i\\) should be the unit of the generalized displacement \\(u\\). The unit of each \\(f_i\\) should be the unit of the generalized force \\(f\\).</p> <p>Important</p> <p>Due to implementation details, the way the curve folds and unfolds should respect some conditions. First, the curve cannot have cusps. Second, the tangent vector along the curve can never point vertically upward, as one moves along the curve from the origin (it is perfectly fine for the tangent to point vertically downward).</p> <p>Also, a Bezier2 behavior introduces an extra degree of freedom (DOF) in order to disambiguate the state of the spring, as the generalized displacement \\(u\\) is not enough to fully define its state. Using a Bezier behavior instead when the curve does not curve back helps keep the number of DOFs low.</p>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#piecewise-behavior","title":"Piecewise behavior","text":"<p>A piecewise behavior is defined by a piecewise linear function whose corners have been smoothed using quadratic functions. A piecewise curve composed of \\(n&gt;1\\) segments is described by \\(n\\) slopes \\(k_i\\) and \\(n-1\\) transition points \\(u_i\\) at which the segments would connect. The quantity \\(u_s\\) describes how smooth each corner must be. More precisely, around each corner \\(i\\) located at \\(u_i\\), the curve is given by a quadratic function on the interval \\(\\left[u_i-u_s, u_i+u_s\\right]\\), instead of linear segments. The smoothing quadratic functions are tuned to be C1 continuous with the segments they connect.</p> <p><code>PIECEWISE(k_i=[&lt;value_11&gt;; &lt;value_12&gt;; ...;&lt;value_1n&gt;]; u_i=[&lt;value_21&gt;; &lt;value_22&gt;; ...; &lt;value_2(n-1)&gt;]; us=&lt;value&gt;])</code></p> <p>Example: <code>..., PIECEWISE(k_i=[1.0;-1.0;2.0]; u_i=[1.0;2.0]; us=0.2)</code></p> <p>A spring is defined with a generalized force-displacement relation described as a smoothed piecewise linear curve composed of three segments with slopes <code>1.0</code>, <code>-1.0</code> and <code>2.0</code>, with the transition between the first and second segment at <code>1.0</code> and the transition between the second and third segment at <code>2.0</code>. The amount of smoothing is set to <code>0.2</code>.</p> <p></p> Units? <p>The unit of each \\(k_i\\) should be the unit of the generalized force \\(f\\) divided by the unit of the generalized displacement \\(u\\). The unit of each \\(u_i\\) and the unit of \\(u_s\\) should be the unit of the generalized displacement \\(u\\).</p> <p>Note</p> <p>The quantity \\(u_s\\) must be positive and lower than \\(\\min((u_1-0.0), (u_2-u_1)/2, ..., (u_{n-1}-u_{n-2})/2)\\). Also, the generalized force-displacement relation is defined for negative generalized displacements \\(u&lt;0\\) by imposing the symmetry \\(f(u&lt;0)=-f(|u|)\\).</p>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#zigzag-behavior","title":"Zigzag behavior","text":"<p>A zigzag behavior is described by a generalized force-displacement curve defined as a polygonal chain with smoothed corners. It is specified by providing the control points' coordinates \\((u_i, f_i)\\) (coordinates of the corners of the non-smoothed polygonal chain), and a smoothing parameter \\(0&lt;\\epsilon&lt;1\\).</p> <p><code>ZIGZAG(u_i=[&lt;value_11&gt;; &lt;value_12&gt;; ...;&lt;value_1n&gt;]; f_i=[&lt;value_21&gt;; &lt;value_22&gt;; ...; &lt;value_2n&gt;]; epsilon=&lt;value&gt;)</code></p> <p>Example: <code>..., ZIGZAG(u_i=[1.0; 2.0; 3.0]; f_i=[1.0; -0.5; 2.0]; epsilon=0.8)</code></p> <p>A spring is defined with a generalized force-displacement relation described as a smoothed zigzag curve defined by 4 control points (0, 0), (<code>1.0</code>, <code>1.0</code>), (<code>2.0</code>, <code>-0.5</code>) and (<code>3.0</code>, <code>2.0</code>). The corners are smoothed using \\(\\epsilon=\\)<code>0.8</code></p> <p></p> Units? <p>The unit of each \\(u_i\\) should be the unit of the generalized displacement \\(u\\). The unit of each \\(f_i\\) should be the unit of the generalized force \\(f\\). The smoothing parameter \\(\\epsilon\\) has no dimension.</p> <p>Note</p> <p>The generalized force-displacement relation is defined for negative generalized displacements \\(u&lt;0\\) by imposing the symmetry \\(f(u&lt;0)=-f(|u|)\\).</p>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#zigzag2-behavior","title":"Zigzag2 behavior","text":"<p>A zigzag2 behavior is the same as a zigzag behavior. The only difference is that, unlike a zigzag behavior, a zigzag2 behavior is allowed to define a curve that curves back, meaning that at a certain generalized displacement value, multiple force values can exist.</p> <p><code>ZIGZAG2(u_i=[&lt;value_11&gt;; &lt;value_12&gt;; ...;&lt;value_1n&gt;]; f_i=[&lt;value_21&gt;; &lt;value_22&gt;; ...; &lt;value_2n&gt;]; epsilon=&lt;value&gt;)</code></p> <p>Example: <code>..., ZIGZAG2(u_i=[2.0; 1.0; 3.0]; f_i=[2.0; 0.0; 1.0]; epsilon=0.4)</code></p> <p>A spring is defined with a generalized force-displacement relation described as a smoothed zigzag curve with control points (0, 0), (<code>2.0</code>, <code>2.0</code>), (<code>1.0</code>, <code>0.0</code>) and (<code>3.0</code>, <code>1.0</code>). The corners are smoothed using \\(\\epsilon=\\)<code>0.4</code> This curve curves back; it cannot be described a function \\(f(u)\\).</p> <p></p> Units? <p>The unit of each \\(u_i\\) should be the unit of the generalized displacement \\(u\\). The unit of each \\(f_i\\) should be the unit of the generalized force \\(f\\). The smoothing parameter \\(\\epsilon\\) has no dimension.</p> <p>Important</p> <p>Due to implementation details, the way the curve folds and unfolds should respect some conditions. First, the curve cannot have cusps. Second, the tangent vector along the curve can never point vertically upward, as one moves along the curve from the origin (it is perfectly fine for the tangent to point vertically downward).</p> <p>Also, a zigzag2 behavior introduces an extra degree of freedom (DOF) in order to disambiguate the state of the spring, as the generalized displacement \\(u\\) is not enough to fully define its state. Using a zigzag behavior instead when the curve does not curve back helps keep the number of DOFs low.</p>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#contact-behavior","title":"Contact behavior","text":"<p>A contact behavior is described by a generalized force-displacement curve that is perfectly zero for large displacement \\(u \\geq \\alpha_\\Delta - \\alpha_0\\) and yields a relatively strong repulsion force for low displacement \\(u&lt;\\alpha_\\Delta - \\alpha_0\\). More precisely, the generalized force-displacement curve is given by</p> \\[ f(u) = \\begin{cases}     0&amp;\\text{if $u \\ge \\alpha_\\Delta - \\alpha_0$}\\\\     -f_0\\left(\\dfrac{\\alpha_\\Delta - \\alpha_0-u}{u_\\text{c}}\\right)^3&amp;\\text{if $u &lt; \\alpha_\\Delta - \\alpha_0$}, \\end{cases} \\] <p>where \\(f_0\\) is the magnitude of the generalized force \\(f\\) when the generalized displacement \\(u\\) is decreased by \\(u_\\text{c}\\) from \\(\\alpha_\\Delta - \\alpha_0\\). It is useful to model contact, as a relatively significant force is generated but only below a certain threshold.</p> <p><code>CONTACT(f0=&lt;value1&gt;; uc=&lt;value2&gt;; delta=&lt;value3&gt;)</code></p> <p>Example: <code>..., CONTACT(f0=3.0; uc=0.01; delta=0.5)</code></p> <p>A spring is defined with a contact behavior. When the measure \\(\\alpha\\) of the spring becomes less than <code>delta=0.5</code>, an increasingly strong repulsion generalized force is generated, reaching -<code>3.0</code> when the measure is decreased further by <code>0.01</code>, that is, when \\(\\alpha=\\) <code>0.49</code>. </p> Units? <p>The unit of \\(u_c\\) should be the unit of the generalized displacement \\(u\\). The unit of \\(f_0\\) should be the unit of the generalized force \\(f\\).</p> <p>Note</p> <p>For a spring with a contact behavior, the natural measure \\(\\alpha_0\\) does not have any effect, as the force produced by the contact behavior solely depends on the measure \\(\\alpha\\); it is independent of the natural measure \\(\\alpha_0\\).</p>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#isothermal-behavior","title":"Isothermal behavior","text":"<p>An isothermal behavior is described by a generalized force-displacement curve that respects the pressure-volume relation of an ideal gas during an isothermal process (constant temperature). That relation can be expressed as follows,</p> \\[ p - p_0 = nRT_0 \\left( 1/V - 1/V_0\\right), \\] <p>where \\(p_0\\) is the ambient pressure, \\(V_0\\) is the volume of the gas at ambient pressure, \\(T_0\\) is the temperature of the gas (constant), \\(p\\) is the current pressure, \\(V\\) is the current volume, \\(n\\) is the amount of substance (constant), \\(R\\) is the gas constant.</p> <p>More precisely, the generalized force \\(f\\) plays the role of the pressure difference, \\(f=p_0-p\\), while the generalized displacement plays the role of volume change, \\(u=V-V_0\\). The measure \\(\\alpha\\) and natural measure \\(\\alpha_0\\) are mapped to \\(\\alpha=V\\) and \\(\\alpha_0=V_0\\), respectively. The \\(f-u\\) curve is therefore given by</p> \\[ f = nRT_0\\frac{u}{(u+\\alpha_0)\\alpha_0}. \\] <p><code>ISOTHERMAL(n=&lt;n_value&gt;; R=&lt;R_value&gt;; T0=&lt;T0_value&gt;)</code></p> <p>Example: <code>..., ISOTHERMAL(n=1.0; R=8.3; T0=300)</code></p> <p>A spring is defined with an isothermal behavior. Its generalized force-displacement relation follows the behavior of <code>1</code> mole of an ideal gas at constant temperature \\(T_0\\)=<code>300</code>K.</p> <p></p> Isn't the parameter \\(\\alpha_0=V_0\\) missing? <p>It seems like we are missing the parameter \\(\\alpha_0\\), describing the volume \\(V_0\\) at ambient pressure \\(p_0\\), in the specification. This is not a problem; remember that the value of \\(\\alpha_0\\) is in fact automatically set to the value of the spring measure in the state defined by the <code>NODES</code> section, when not provided. If you want to assign a value for \\(\\alpha_0\\), you can do it by adding a comma followed by the \\(\\alpha_0\\) value.</p> <p>Example: <code>... , ISOTHERMAL(n=1.0; R=8.3; T0=300), 1.0</code></p> <p>A spring is defined with an isothermal behavior. Its generalized force-displacement relation follows the behavior of <code>1</code> mole of an ideal gas at constant temperature \\(T_0\\)=<code>300</code>K. Its volume/measure at ambient pressure is <code>1.0</code>.</p> Units? <p>The unit of the quantity \\(nRT_0\\) should be a unit of energy; more precisely, it should be the unit of the generalized force \\(f\\) multiplied by the unit of the generalized displacement \\(u\\).</p> <p>Note</p> <p>A negative generalized force \\(f&lt;0\\) corresponds to a compressed state (the pressure is greater than the ambient pressure, \\(p&gt;p_0\\)). A positive generalized force \\(f&gt;0\\) corresponds to a vacuumed state (the pressure is smaller than the ambient pressure, \\(p&lt;p_0\\)).</p>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#isentropic-behavior","title":"Isentropic behavior","text":"<p>An isentropic behavior is described by a generalized force-displacement curve that respects the pressure-volume relation of an ideal gas during an isentropic process (constant entropy). That relation can be expressed as follows,</p> \\[  p-p_0 = nRT_0\\left(\\dfrac1V\\left(\\dfrac{V_0}{V}\\right)^{\\gamma-1} - \\dfrac1{V_0}\\right), \\] <p>where \\(p_0\\) is the ambient pressure, \\(V_0\\) is the volume of the gas at ambient pressure, \\(T_0\\) is the temperature of the gas at ambient pressure, \\(p\\) is the current pressure, \\(V\\) is the current volume, \\(n\\) is the amount of substance (constant), \\(R\\) is the gas constant and \\(\\gamma\\) is the heat capacity ratio (constant).</p> <p>More precisely, the generalized force \\(f\\) plays the role of the pressure difference, \\(f=p_0-p\\), while the generalized displacement plays the role of volume change, \\(u=V-V_0\\). The measure \\(\\alpha\\) and natural measure \\(\\alpha_0\\) are mapped to \\(\\alpha=V\\) and \\(\\alpha_0=V_0\\), respectively. The \\(f-u\\) curve is therefore given by</p> \\[ f(u) = nRT_0\\left(\\dfrac1{\\alpha_0} - \\dfrac1{u+\\alpha_0}\\left(\\dfrac{\\alpha_0}{u+\\alpha_0}\\right)^{\\gamma-1}\\right). \\] <p><code>ISENTROPIC(n=&lt;n_value&gt;; R=&lt;R_value&gt;; T0=&lt;T0_value&gt;; gamma=&lt;gamma_value&gt;)</code></p> <p>Example: <code>..., ISENTROPIC(n=1.0; R=8.3; T0=300; gamma=1.4)</code></p> <p>A spring is defined with an isentropic behavior. Its generalized force-displacement relation follows the behavior of <code>1</code> mole of an ideal gas initially at \\(T_0\\)=<code>300</code>K, with \\(\\gamma\\)=<code>1.4</code> (heat capacity ratio of air), at constant entropy.</p> <p></p> Isn't the parameter \\(\\alpha_0=V_0\\) missing? <p>It seems like we are missing the parameter \\(\\alpha_0\\), describing the volume \\(V_0\\) at ambient pressure \\(p_0\\), in the specification. This is not a problem; remember that the value of \\(\\alpha_0\\) is in fact automatically set to the value of the spring measure in the state defined by the <code>NODES</code> section, when not provided. If you want to assign a value for \\(\\alpha_0\\), you can do it by adding a comma followed by the \\(\\alpha_0\\) value.</p> <p>Example: <code>... , ISENTROPIC(n=1.0; R=8.3; T0=300; gamma=1.4), 1.0</code></p> <p>A spring is defined with an isentropic behavior. Its generalized force-displacement relation follows the behavior of <code>1</code> mole of an ideal gas initially at \\(T_0\\)=<code>300</code>K, with \\(\\gamma\\)=<code>1.4</code>, at constant entropy. Its volume/measure at ambient pressure is <code>1.0</code>.</p> Units? <p>The unit of the quantity \\(nRT_0\\) should be a unit of energy; more precisely, it should be the unit of the generalized force \\(f\\) multiplied by the unit of the generalized displacement \\(u\\). The heat capacity ratio \\(\\gamma\\) has no dimension.</p> <p>Note</p> <p>A negative generalized force \\(f&lt;0\\) corresponds to a compressed state (the pressure is greater than the ambient pressure, \\(p&gt;p_0\\)). A positive generalized force \\(f&gt;0\\) corresponds to a vacuumed state (the pressure is smaller than the ambient pressure, \\(p&lt;p_0\\)).</p>"},{"location":"specifying_a_nonlinear_mechanical_behavior/#additional-notes","title":"Additional notes","text":"<ul> <li> <p>A nonlinear behavior can be saved in a separate CSV file and used in a model file using <code>FROMFILE(&lt;nonlinear behavior csv file&gt;)</code></p> <p>Example: <code>..., FROMFILE('custom_nonlinear_behavior.csv')</code></p> <p>where the <code>custom_nonlinear_behavior.csv</code> contains, for example,</p> <p><code>BEZIER2(u_i=[0.21; -0.1; 3.14]; f_i=[1.0; -2.0; +3.0])</code>.</p> <p>Note</p> <p>The natural measure \\(\\alpha_0\\) can optionally be specified in the CSV behavior file. For example, to set a natural measure \\(\\alpha_0=2\\), we would use the following CSV behavior file:</p> <p><code>BEZIER2(u_i=[0.21; -0.1; 3.14]; f_i=[1.0; -2.0; +3.0]), 2.0</code>.</p> <p>If a natural measure \\(\\alpha_0\\) is also set in the CSV model file, for example, <code>FROMFILE('custom_nonlinear_behavior.csv'), 3.0</code>, it will be ignored and the natural measure remains the one specified in the CSV behavior file. In this case, the natural measure will be <code>2.0</code>, not <code>3.0</code>.</p> <p>If no natural measure is specified in the CSV behavior file, then the natural measure is the one specified in the CSV model file. If also not specified in CSV model file, then it will be automatically computed from the node positions as specified in the <code>NODES</code> section.</p> <p>The file path to the behavior is relative to the working directory, that is, the directory from where the script is run. If the CSV behavior file lives in a subdirectory <code>path/to/behavior.csv</code> relative to the working directory, then we would use <code>FROMFILE('path'; 'to'; 'behavior.csv')</code></p> <p>To specify a CSV behavior file that would live in a subdirectory <code>relative/path/to/behavior.csv</code> relative to the CSV model file instead, we can use the keyword <code>HERE</code> that encodes the directory where the CSV model file lives (relative to the working directory) as follows: <code>FROMFILE(HERE; 'relative; 'path'; 'to'; 'behavior.csv')</code></p> </li> <li> <p>Nonlinear behaviors can be interactively created, tuned, edited, compared, copied and saved using the behavior creation graphical interface, which can be started by running the following Python script <pre><code>from springable.behavior_creation import start\n\nstart()\n</code></pre></p> </li> </ul>"},{"location":"theory/","title":"Theory","text":"<p>The <code>springable</code> Python library is an implementation of the flexel framework. This framework defines a method to define and solve mechanical systems composed of energy-storing entities called flexels.</p>"},{"location":"theory/#flexel","title":"Flexel","text":"<p>A flexel (flexible element) can be seen as the generalization of a nonlinear spring. In a nonlinear spring, the axial force is found in two steps: first, its length is calculated from the end nodes\u2019 coordinates; then, that length is used in an energy potential whose derivative gives the force. A flexel extends this idea in two main ways. First, it replaces the notion of length with a more general geometric measure (noted \\(\\alpha\\)), which can be any scalar value computed from a list of nodes\u2019 coordinates (noted \\(z_i\\)); for example, an angle, an area, a total path length, or the distance from a point to a line. Second, it allows for a wider range of energy potentials, supporting tunable and possibly multi-valued force\u2013displacement curves. These curves can have multiple turning points and intersections, allowing flexels to singlehandedly encode information about their loading history, or capture snapping or countersnapping phenomenona, for instance.</p> <p></p> <p>The flexel's ability to capture highly nonlinear behaviors without resorting to an assembly of lower-level components stands in stark contrast with other finite element methods. The versatility of flexels to represent different shapes and behaviors allows to model stretch, compression, bending, pneumatic actuation, cable-driven systems, contact... or interacting of those! As all flexels rely on a single formulation, they form an ecosystem which allows to build simpler models, that are easier to solve, interpret and use to gain insight into the mechanics or guide the design process.</p>"},{"location":"theory/#the-mathematical-formulation-the-equations-and-the-algorithm","title":"The mathematical formulation, the equations and the algorithm","text":"<p>The complete theory, the algorithm and all the derived equations are available in the research paper that introduces the flexel framework. The full preprint is freely available here on arXiv. The mathematical formulation and equations are developed in the supplementary information section (second part of the PDF).</p> <p>If <code>springable</code> or the concept of flexel has been useful for your work, your research or your projects, we strongly encourage you to cite our paper</p> <p>Ducarme, P., Weber, B., van Hecke, M., &amp; Overvelde, J. T. B. (2025). Flexel ecosystem: Simulating mechanical systems from entities with arbitrarily complex mechanical responses. arXiv. https://doi.org/10.48550/arXiv.2510.19741</p> <pre><code>@misc{ducarme_flexel_2025,\n    title = {Flexel ecosystem: simulating mechanical systems from entities with arbitrarily complex mechanical responses},\n    shorttitle = {Flexel ecosystem},\n    url = {http://arxiv.org/abs/2510.19741},\n    doi = {10.48550/arXiv.2510.19741},\n    abstract = {Nonlinearities and instabilities in mechanical structures have shown great promise for embedding advanced functionalities. However, simulating structures subject to nonlinearities can be challenging due to the complexity of their behavior, such as large shape changes, effect of pre-tension, negative stiffness and instabilities. While traditional finite element analysis is capable of simulating a specific nonlinear structure quantitatively, it can be costly and cumbersome to use due to the high number of degrees of freedom involved. We propose a framework to facilitate the exploration of highly nonlinear structures under quasistatic conditions. In our framework, models are simplified by introducing `flexels', elements capable of intrinsically representing the complex mechanical responses of compound structures. By extending the concept of nonlinear springs, flexels can be characterized by multi-valued response curves, and model various mechanical deformations, interactions and stimuli, e.g., stretching, bending, contact, pneumatic actuation, and cable-driven actuation. We demonstrate that the versatility of the formulation allows to model and simulate, with just a few elements, complex mechanical systems such as pre-stressed tensegrities, tape spring mechanisms, interaction of buckled beams and pneumatic soft gripper actuated using a metafluid. With the implementation of the framework in an easy-to-use Python library, we believe that the flexel formulation will provide a useful modeling approach for understanding and designing nonlinear mechanical structures.},\n    urldate = {2025-10-24},\n    publisher = {arXiv},\n    author = {Ducarme, Paul and Weber, Bart and Hecke, Martin van and Overvelde, Johannes T. B.},\n    month = oct,\n    year = {2025},\n    note = {arXiv:2510.19741 [cond-mat]},\n    keywords = {Condensed Matter - Soft Condensed Matter},\n}\n</code></pre>"}]}